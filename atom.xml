<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hi,I'm Qiuncheng]]></title>
  <subtitle><![CDATA[/*每一秒我们都有机会让下一秒变得更好！*/]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://qiuncheng.com/"/>
  <updated>2016-05-28T14:25:05.000Z</updated>
  <id>http://qiuncheng.com/</id>
  
  <author>
    <name><![CDATA[Qiuncheng]]></name>
    <email><![CDATA[mc_hello@163.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[[译] Animating text layers using CoreAnimation and CoreText frameworks in iOS SDK]]></title>
    <link href="http://qiuncheng.com/2016/05/28/39-animating-text-layers/"/>
    <id>http://qiuncheng.com/2016/05/28/39-animating-text-layers/</id>
    <published>2016-05-28T14:20:03.000Z</published>
    <updated>2016-05-28T14:25:05.000Z</updated>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://vormlab.com/animating-text-layers-using-coreanimation-coretext-frameworks-ios-sdk/" target="_blank" rel="external"> Animating text layers using CoreAnimation and CoreText frameworks in iOS SDK</a><br><img src="http://vormlab.com/wp-content/uploads/2016/04/CoreAnim_cover-13Apr2016.gif" alt=""><br><a id="more"></a></p>
<h3 id="4月13号_使用iOS_SDK中的CoreAnimation和CoreText实现文本层动画"><span style="color: #118800">4月13号</span> 使用iOS SDK中的CoreAnimation和CoreText实现文本层动画</h3><p><code>CoreAnimation</code>是一个非常强大的框架。通过使用<code>CABasicAnimation</code>，<code>CAKeyFrameAnimation</code>或者<code>CAAnimationGroup</code>，我们可以创建惊艳的用户体验来，同时基本上是没有什么限制的。仅仅取决于我们想要在屏幕上展示什么和它是怎么交互的。事实证明，<code>CoreAnimation</code>也可以和一些其他的框架（如<code>CoreGraphics</code>或者<code>CoreText</code>）组合使用，这也给了开发者创造更加惊艳的动画的能力。使用<code>CoreText</code>和<code>CoreAnimation</code>我们可以给任何指定字体类型和字体大小的文本添加动画。在这篇文章中我会展示一种方式如何做到这样。</p>
<h4 id="CoreText基础"><code>CoreText</code>基础</h4><p>首先，让我向大家展示一下<code>CoreText</code>的基础。为了给文本添加动画，我们必须知道线条（<code>line</code>）和象形符号（<code>glyph</code>）是什么，这会帮助我们理解从一个文本生成一条路径（path）的整个过程。苹果已经为我们奠定了<code>CoreText</code>的基础知识。所有的这些都可以在下面看到。下面是我收集的最重要的信息。</p>
<p><img src="http://vormlab.com/wp-content/uploads/2016/04/Fig-1.1-CoreText-basics-2.png" alt="图1-CoreText结构，来源：[]( http://developer.apple.com http://developer.apple.com)"></p>
<p>在此层次结构的顶部是<code>frame setter</code>对象。带有属性的字符串和图形路径作为输入。一个<code>frame setter</code>生成文本的一个或者多个<code>frame</code>。每一个frame对象都代表一个段落。要生成<code>frame</code>，<code>frame setter</code>调用一个<code>typesetter</code>对象。当一个<code>frame setter</code>奠定一个特定的<code>frame</code>的时候，它适用于段落样式，包括对齐方式，制表位，或者行距等属性。typesetter将这些带有属性的字符串中的字符转换成象形字符（glyphs），同时也适合那些象形字符（<code>glyphs</code>）形成填充文字框的线条。</p>
<p>每一个<code>frame</code>对象包含段落的线对象，它代表一个段落中文本的一行。一个frame对象可能只包含一个单一的长line对象，也可能包含一系列的line。line对象在frame设置时期被typesetter创建。每一个line对象包含一组象形字符运行（<code>glyph run</code>）对象。一个象形字符运行（<code>glyph run</code>）是一组共享相同属性和方向的连续象形字符（<code>glyph</code>）。<code>typesetter</code>创建象形字符运行（<code>glyph run</code>）就像它从字符串、属性和字体对象生产line一样。这意味着，一个line构成一个或者多个象形字符运行（<code>glyph run</code>）。在层次结构的尾部是通常代表单个文本字符的象形字符（<code>glyph</code>）对象。经过我们对<code>CoreText</code>的基本熟悉，我们现在可以文本层动画了。</p>
<h4 id="Animating_text_layer"><code>Animating text layer</code></h4><p>为了给文本层添加动画，我们需要将其转换成<code>CGPath</code>对象。首先我们必须创建我们想要添加动画的带属性的字符，然后我们为了得到象形字符运行（<code>glyph run</code>）不得不从这个字符串中创建一个<code>line</code>对象。下面的代码展示了我们如何实现这些目的：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attrString  = <span class="type">NSAttributedString</span>(string: text, attributes: [kCTFontAttributeName <span class="keyword">as</span> <span class="type">String</span> : font])</span><br><span class="line"><span class="keyword">let</span> line        = <span class="type">CTLineCreateWithAttributedString</span>(attrString)</span><br><span class="line"><span class="keyword">let</span> runArray    = <span class="type">CTLineGetGlyphRuns</span>(line)</span><br></pre></td></tr></table></figure></p>
<p>这里我们将所有的象形字符运行（<code>glyph run</code>）保存在<code>runArray</code>中。我们通过这个数组循环，并且从每一个象形字符运行（<code>glyph run</code>）来看，我们可以得到这些字体，以及所有相应的象形字符（<code>glyph</code>）。现在我们可以通过遍历所有的象形字符（<code>glyph</code>）来选出特定的象形字符（<code>glyph</code>）对象。当我们有了这个对象，我们可以计算它的位置，并使用<code>CTFontCreatePathForGlyph</code>函数将其转换成<code>path</code>对象。通过拥有一个路径就知道它的位置，我们就可以创建一个有象形字符（<code>glyph</code>）路径组合而成的总体路径。下面的伪代码显示了整体算法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%<span class="type">For</span> each glyph run</span><br><span class="line"><span class="keyword">for</span> runIndex <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="type">CFArrayGetCount</span>(runArray) &#123;</span><br><span class="line">     <span class="keyword">let</span> runFont = %<span class="type">Get</span> a font from a single glyph</span><br><span class="line"></span><br><span class="line">     %<span class="type">For</span> each glyph <span class="keyword">in</span> a single glyph run</span><br><span class="line">     <span class="keyword">for</span> runGlyphIndex <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="type">CTRunGetGlyphCount</span>(run) &#123;</span><br><span class="line">                <span class="keyword">var</span> glyph    = %<span class="type">Get</span> a glyph</span><br><span class="line">                <span class="keyword">var</span> position = %<span class="type">Get</span> glyph’s position</span><br><span class="line"></span><br><span class="line">                %<span class="type">Get</span> a letter path from a single glyph</span><br><span class="line">                <span class="keyword">let</span> letter = <span class="type">CTFontCreatePathForGlyph</span>(runFont, glyph, <span class="literal">nil</span>)</span><br><span class="line">                 %<span class="type">Make</span> a translation to a desired position</span><br><span class="line">                <span class="keyword">var</span> t = <span class="type">CGAffineTransformMakeTranslation</span>(position.x, position.y)</span><br><span class="line">                 %<span class="type">Add</span> a single letter path to the whole path  </span><br><span class="line">                <span class="type">CGPathAddPath</span>(letters, &amp;t, letter)</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>之后我们已经将我们的文本转换成<code>path</code>对象，并将其添加到路径层，我们就可以使用下面代码简单添加动画了：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pathAnimation       = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"strokeEnd"</span>)</span><br><span class="line">pathAnimation.duration  = duration</span><br><span class="line">pathAnimation.fromValue = <span class="number">0.0</span></span><br><span class="line">pathAnimation.toValue   = <span class="number">1.0</span></span><br><span class="line">pathAnimation.delegate  = <span class="keyword">self</span></span><br><span class="line">pathLayer?.addAnimation(pathAnimation, forKey: <span class="string">"strokeEnd"</span>)</span><br></pre></td></tr></table></figure></p>
<p>为了达到给文本层添加动画的目的，一个<code>VRMTextAnimator</code>类被创建了。这个类和示范文本层动画的示例工程在<a href="https://github.com/VormLab/VRMTextAnimator" target="_blank" rel="external">这里</a>可以找到。</p>
<p>为了使用这个类，你不得不使用带有一个<code>reference view</code>的初始化方式<code>init(referenceView:)``初始化。</code>reference view<code>是一种类型的视图，其中我们执行文本动画。</code>VRMTextAnimator<code>有两个关键属性，</code>animationLayer<code>和</code>pathLayer<code>。第一个是我们要执行动画的CALayer对象，第二个是CAShapeLayer对象，它存储从我们之前设定的文字创造了一个</code>CGPath<code>对象。这个类也有三个可设置的属性：字体名称/</code>fontName<code>，字体尺寸/</code>fontSize<code>，</code>textToAnimate<code>。如果我们想要动画一个特定的文本与他的字体和字体大小，我们需要设置这些属性，</code>VRMTextAnimator`也有一个代理对象，可以通知我们动画的起点和终点。</p>
<p><img src="http://vormlab.com/wp-content/uploads/2016/04/textAnimator_colored.gif" alt=""></p>
<p>在这个项目中，有两种类型的文本层动画。第一种动画是简单的开始按钮触发的，第二种是通过滑块控制的。事实证明，我们可以设置它的<code>speed</code>，<code>fromValue</code>，<code>toValue</code>，<code>duration</code>和<code>timeOffset</code>属性。如果我们设置<code>fromValue</code>为0，<code>toValue</code>为1，<code>duration</code>为1，同时我们正在动画pathLayer对象的<code>strokeEnd</code>属性，我们就可以通过设置<code>pathLayer</code>的<code>timeOffset</code>属性来绘制文本轮廓的相应部分。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址：<a href="http://vormlab.com/animating-text-layers-using-coreanimation-coretext-frameworks-ios-sdk/"> Animating text layers using CoreAnimation and CoreText frameworks in iOS SDK</a><br><img src="http://vormlab.com/wp-content/uploads/2016/04/CoreAnim_cover-13Apr2016.gif" alt=""><br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="翻译" scheme="http://qiuncheng.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[翻译Autolayout（3）]]></title>
    <link href="http://qiuncheng.com/2016/05/02/38-Autolayout-3-anchor-visual/"/>
    <id>http://qiuncheng.com/2016/05/02/38-Autolayout-3-anchor-visual/</id>
    <published>2016-05-02T08:43:48.000Z</published>
    <updated>2016-05-02T08:46:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Anchor_notation（瞄点符号）">Anchor notation（瞄点符号）</h4><blockquote>
<p>继上篇《在代码中使用Autolayout》 <br><br>这篇主要讲“Anchor notation”</p>
</blockquote>
<p>在iOS9中，用<code>Anchor nonation</code>做我之前做过的任何事情都是有可能的，创建同样的八个约束，然后把它们添加到同样的view上，使用一种更加紧凑的标记。之前的nonation有一些奇特的特点，那就是一个<code>NSLayoutConstraint</code>初始化方法可以创建任何约束。新的<code>Anchor
notation</code>采用了一种相反的方式，它聚焦在简洁上，但是却牺牲了突出点。为了做到这一点，除了聚焦于约束上，它也聚焦在约束关联的属性上。这些属性被描述为<code>UIView</code>的<code>anchor</code>属性。</p>
<ul>
<li><code>topAnchor</code>, <code>bottomAnchor</code></li>
<li><code>leftAnchor</code>, <code>rightAnchor</code>,<code>leadingAnchor</code>, <code>trailingAnchor</code></li>
<li><code>centerXAnchor</code>, <code>centerYAnchor</code></li>
<li><code>firstBaselineAnchor</code>, <code>lastBaselineAnchor</code> <br></li>
</ul>
<p>所有的瞄点值都是NSLayoutAnchor的实例（其中一些也是NSLayoutAnchor子类的实例）。建立约束的方法都是NSLayoutAnchor的实例化方法，而且有很多这样的方法，选择哪一个取决于你的约束需要具体描述的另一个anchor（当然constant保持默认0，multiplier默认保持1），constant或者multiplier或者他们两个，都取决于你对以下关系的选择：</p>
<ul>
<li><code>constraintEqualToConstant:</code></li>
<li><code>constraintGreaterThanOrEqualToConstraint:</code></li>
<li><code>constraintLessThanOrEqualConstant:</code></li>
<li><code>constraintEqualToAnchor:</code></li>
<li><code>constraintGreaterThanOrEqualToAnchor:</code></li>
<li><code>constraintLessThanOrEqualToAnchor:</code></li>
<li><code>constraintEqualToAnchor:constant:</code></li>
<li><code>constraintGreaterThanOrEqualToAnchor:constant:</code></li>
<li><code>constraintLessThanOrEqualToAnchor:constant:</code></li>
<li><code>constraintEqualToAnchor:multiplier:</code></li>
<li><code>constraintGreaterThanOrEqualToAnchor:multiplier:</code></li>
<li><code>constraintLessThanOrEqualToAnchor:multiplier:</code></li>
<li><code>constraintEqualToAnchor:multiplier:constant:</code></li>
<li><code>constraintGreaterThanOrEqualToAnchor: multiplier: constant:</code></li>
<li><code>constraintLessThanOrEqualToAnchor: multiplier: constant:</code></li>
</ul>
<p>所有的这些当我描述的时候你可能挺起来非常细心，但是当你在实例中看他们的时候，你会很欣赏这些紧凑的注解所带来的好处。他们是如此地好写，（尤其多亏了Xcode的代码自动补全）如此地好读，如此地好维护。这些新的notation在和<code>activateContraints:</code>方法相连接的时候是非常方便的，因为我们不用去关心每一条约束被明确地添加到那个view上：（就像下面那样：）</p>
  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSLayoutAnchor</span>.activateContraints([</span><br><span class="line">  v2.leadingAnchor.constraintEqualToAnchor(v1.leadingAnchor),</span><br><span class="line">  v2.trailingAnchor.constraintEqualToAnchor(v1.trailingAnchor),</span><br><span class="line">  v2.topAnchor.constraintEqualToAnchor(v1.topAnchor),</span><br><span class="line">  v2.heightAnchor.constraintEqualToConstant(<span class="number">10</span>),</span><br><span class="line">  v3.widthAnchor.constraintEqualToConstant(<span class="number">20</span>),</span><br><span class="line">  v3.heightAnchor.constraintEqualToConstant(<span class="number">20</span>),</span><br><span class="line">  v3.trailingAnchor.constraintLessThanOrEqualToAnchor(v1.trailingAnchor),</span><br><span class="line">  v3.bottomAnchor.constraintEqualToAnchor(v1.bottomAnchor)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>这八行代码中的八个约束，加上包围的<code>acitvateConstraints</code>方法调用来把这些约束落实到我们的interface上。这儿并没有严格需要将所有的约束一下子activate，但是最好这样做。</p>
<h4 id="Visual_format_notation(视觉符号格式)">Visual format notation(视觉符号格式)</h4><p>另一种来缩写创建约束的方式是使用某种基于文本的速记，叫做视觉符号格式。这个可以让你同步的描述多种约束。它也是特别具体的当你安排一系列竖直方向或者水平方向的view的时候。我会以一个很简单的例子开头:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#22312;&#19978;&#36848;&#34920;&#36798;&#20013;&#65292;`V:`&#20195;&#34920;&#35770;&#36848;&#19979;&#30340;`vertical deimension`&#65292;&#21478;&#19968;&#21322;&#36873;&#25321;&#26159;`H:`&#65292;&#23427;&#20063;&#26159;&#40664;&#35748;&#30340;&#65288;&#22240;&#27492;&#20934;&#35768;&#19981;&#25351;&#26126;&#23610;&#23544;&#65289;&#12290;&#19968;&#20010;view&#30340;&#21517;&#23383;&#20986;&#29616;&#22312;&#25324;&#21495;&#37324;&#65292;&#21516;&#26102;&#19968;&#20010;&#31446;&#30452;&#31526;&#21495;&#34920;&#31034;`superview`&#65292;&#25152;&#20197;&#36825;&#37324;&#25105;&#20204;&#27491;&#22312;&#25551;&#32472;v2&#30340;top edge&#39030;&#20303;&#23427;superview&#30340;top edge&#12290;&#25968;&#23383;&#30340;&#31526;&#21495;&#34920;&#31034;&#21442;&#25968;&#65292;&#21516;&#26102;&#25968;&#23383;&#31526;&#21495;&#20276;&#21516;view&#30340;&#21517;&#23383;&#35774;&#32622;view&#30340;&#23610;&#23544;&#65292;&#25152;&#20197;&#22312;&#36825;&#37324;&#25105;&#20204;&#35774;&#32622;v2&#30340;height&#20026;10&#12290;&#10;&#20351;&#29992;visual format&#65292;&#20320;&#19981;&#24471;&#19981;&#25552;&#20379;&#19968;&#20010;&#23383;&#20856;&#26469;&#35013;&#19978;&#38754;&#25552;&#21040;&#30340;view&#30340;&#21517;&#23383;&#23383;&#31526;&#12290;&#20363;&#22914;&#65306;&#20351;&#29992;&#20043;&#21069;&#34920;&#36798;&#30340;&#23383;&#20856;&#21487;&#20197;&#20026;[&#34;v2&#34;:v2]&#12290;&#25152;&#20197;&#36825;&#37324;&#36824;&#26377;&#20043;&#21069;&#34920;&#36798;&#30340;&#21478;&#19968;&#31181;&#26041;&#24335;&#65292;&#20351;&#29992;visual format&#30340;&#31616;&#31216;&#12290;&#10;```Swift&#10;  let d = [&#34;v2&#34;:v2, &#34;v3&#34;:v3]&#10;  NSLayoutConstraint.activateContraints([&#10;    NSLayoutConstraint.constraintWithVisualFormat(&#34;H:|[v2]|&#34;, options: [], merics: nil, views: d),&#10;    NSLayoutConstraint.constraintWithVisualFormat(&#34;V:|[v2(10)]&#34;, options: [], merics: nil, views: d),&#10;    NSLayoutConstraint.constraintWithVisualFormat(&#34;H:[v3(20)]|&#34;, options: [], merics: nil, views: d),&#10;    NSLayoutConstraint.constraintWithVisualFormat(&#34;V:[v3(20)]|&#34;, options: [], merics: nil, views: d)&#10;    ].flatten().map&#123;$0&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这个例子创建了和之前例子相同的约束，但是却使用了五行命令却不是八行。（constraintWithVisualFormat: 方法产生了一个constraints的数组，所以字面上的数组是一个装着约束数组的数组，但是activateContraintsiule 期望只有一个数组约束，所以我筛选出我想要的数组）<br>visual format语法将其自身展示到极致当多种的view沿着同一纬度布置彼此。在那种情况下,你可以减小很多压力。（一些约束由同一个visual format生成）这种语法，在一中程度上也被限制在乐意表达的语法中。同时他也隐藏了约束的数量和产生的约束的特征。同时就我而言，我发现当使用visual format语法的时候比完整地表达出每一个约束更容易犯错。但是，你还是希望能够熟悉visual format，不仅仅是为了隐藏具体描述某个约束的细节。<br>当你使用visual format语法的时候这里有一些需要深入的事情：  </p>
<ul>
<li><code>metrics</code>: 参数是一个有用数字的字典。这可以让你使用一个visual format string的名字。</li>
<li><code>options</code>: 参数是一个bitmask(NSLayoutFormatOptions), 主要让你做一些事情，例如添加alignments。alignments被应用在所有在visual format中提到的views。</li>
<li>为了具体地别是两个连续的view之间的距离，使用连字符<code>-</code>环绕在数字符号周围，像：“[v1]-[20]-[v2]”。数字可以选择性的使用括号<code>[]</code>包围。</li>
<li>一个在括号中的数字可能会地位高于一个同等的或者不同等的操作符。同时也可以跟随一个<code>@</code>符号表示priority。被逗号<code>,</code>分割的多种数字，也可以出现在参数中。例如<code>[v1(&gt;=20@400, &lt;=30)]</code><br></li>
</ul>
<p>想要了解更多关于visual format语法,请查看”Apple’s Auto Layout Guide”一章中的”Visual Format Syntax”</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Anchor_notation（瞄点符号）">Anchor notation（瞄点符号）</h4><blockquote>
<p>继上篇《在代码中使用Autolayout》 <br><br>这篇主要讲“Anchor notation”</p>
</blockquo]]>
    </summary>
    
      <category term="Autolayout" scheme="http://qiuncheng.com/tags/Autolayout/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于dequeueReuseableCellWithIdentifier与dequueReuseableCellWithCellWithIdentifier: forIndexPath的区别]]></title>
    <link href="http://qiuncheng.com/2016/04/13/37-tableview-dequeueWithIdentifier../"/>
    <id>http://qiuncheng.com/2016/04/13/37-tableview-dequeueWithIdentifier../</id>
    <published>2016-04-13T14:52:31.000Z</published>
    <updated>2016-04-13T14:55:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="关于dequeueReuseableCellWithIdentifier与dequueReuseableCellWithCellWithIdentifier:_forIndexPath的区别">关于dequeueReuseableCellWithIdentifier与dequueReuseableCellWithCellWithIdentifier: forIndexPath的区别</h4><ul>
<li>苹果官方对forIndexPath方法的描述是这个方法使用index path来添加基于tableView cell位置的附加配置</li>
</ul>
<p>更好的观点：</p>
<ul>
<li>最重要的区别是如果你没有register一个class或者一个nib的identifier的话，forIndexPath: 版本会崩溃。在这种情况下，旧版本(没有forIndexPath：)会返回nil。<br>其中你通过tableView的registerClass:forCellReuseIdentifier: register一个class的identifier。你通过tableView的registerNib:forCellReuseIdentifier: register 一个nib的identifier。</li>
<li>如果你在Storyboard里创建你的tableView 和 cell的样本的话，Storyboard加载器会注意你在Storyboard中定义的cell原型。</li>
<li>Session 200 - What’s New in Cocoa Touch from WWDC 2012 中提到“forIndexPath：”方法。它告诉我们：你总是可以获取一个初始化过的cell。(并没有提到如果你没有注册class或者nib的话会崩溃)<br><br>这个session还告诉我们：这将是该indexPath合适的尺寸。大概这也意味着这会在设置cell<br>的width和height之前设置cell的size。这也是为什么需要index path。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="关于dequeueReuseableCellWithIdentifier与dequueReuseableCellWithCellWithIdentifier:_forIndexPath的区别">关于dequeueReuseableCellWithIdentifie]]>
    </summary>
    
      <category term="UITableView" scheme="http://qiuncheng.com/tags/UITableView/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AutoLayout翻译二--在代码中使用Autolayout]]></title>
    <link href="http://qiuncheng.com/2016/04/06/36-Autolayout-translate-02/"/>
    <id>http://qiuncheng.com/2016/04/06/36-Autolayout-translate-02/</id>
    <published>2016-04-06T14:20:02.000Z</published>
    <updated>2016-04-06T14:26:32.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前言：继上篇–翻译<a href="http://qiuncheng.com/2016/04/04/35-Autolayout-translate-01/">《Programing iOS9》- Autolayout篇（一）</a><br>上篇中只翻译了与Autolayout有关的词的含义。<br>这篇翻译“Create constraints in code”</p>
</blockquote>
<h3 id="Create_constraints_in_code">Create constraints in code</h3><p>我们已经准备好了用代码来写约束。我会在这里通过<code>NSLayoutConstraint</code>初始化方法<code>init(item:attribute:relateBy:toItem:attribute:multiplier:constant)</code>开始，同时设置好每一个约束的属性值，下面我也会描述他们的含义。（除了priority，它的初始值是1000，但是可以在后来设 置如果需要的话）<br><br>接下来我会生成相同的view、subviews、布局行为像<strong>图1-12</strong>和<strong>图1-13</strong>那样，但是在这里应用constraints。注意到我不会想之前创建那样给subviews v2和v3确定的frames，因为constraints会给他们布局，与此同时，我记得设置他们的<code>translatesAutoresizingMaskIntoConstraints</code>属性为false：<a id="more"></a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码在这里显示，不过现在工程文件里使用了之后再来这里</span></span><br><span class="line">      let v1 = <span class="function"><span class="title">UIView</span><span class="params">(frame: CGRect(x: <span class="number">100</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>)</span></span>)</span><br><span class="line">       v1<span class="class">.backgroundColor</span> = <span class="function"><span class="title">UIColor</span><span class="params">(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</span></span></span><br><span class="line">       let v2 = <span class="function"><span class="title">UIView</span><span class="params">()</span></span></span><br><span class="line">       v2<span class="class">.backgroundColor</span> = <span class="function"><span class="title">UIColor</span><span class="params">(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</span></span></span><br><span class="line">       let v3 = <span class="function"><span class="title">UIView</span><span class="params">()</span></span></span><br><span class="line">       v3<span class="class">.backgroundColor</span> = <span class="function"><span class="title">UIColor</span><span class="params">(red: <span class="number">1</span>, green: <span class="number">0</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</span></span></span><br><span class="line">       view.<span class="function"><span class="title">addSubview</span><span class="params">(v1)</span></span></span><br><span class="line">       v1.<span class="function"><span class="title">addSubview</span><span class="params">(v2)</span></span></span><br><span class="line">       v1.<span class="function"><span class="title">addSubview</span><span class="params">(v3)</span></span></span><br><span class="line">       v2<span class="class">.translatesAutoresizingMaskIntoConstraints</span> = false</span><br><span class="line">       v3<span class="class">.translatesAutoresizingMaskIntoConstraints</span> = false</span><br><span class="line">       v1.addConstraint(NSLayoutConstraint(item: v2,</span><br><span class="line">           attribute: <span class="class">.Leading</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: v1,</span><br><span class="line">           attribute: <span class="class">.Leading</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">       v1.addConstraint(NSLayoutConstraint(item: v2,</span><br><span class="line">           attribute: <span class="class">.Trailing</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: v1,</span><br><span class="line">           attribute: <span class="class">.Trailing</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">       v1.addConstraint(NSLayoutConstraint(item: v2,</span><br><span class="line">           attribute: <span class="class">.Top</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: v1,</span><br><span class="line">           attribute: <span class="class">.Top</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">       v2.addConstraint(NSLayoutConstraint(item: v2,</span><br><span class="line">           attribute: <span class="class">.Height</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: nil,</span><br><span class="line">           attribute: <span class="class">.NotAnAttribute</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">       v3.addConstraint(NSLayoutConstraint(item: v3,</span><br><span class="line">           attribute: <span class="class">.Width</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: nil,</span><br><span class="line">           attribute: <span class="class">.NotAnAttribute</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       v3.addConstraint(NSLayoutConstraint(item: v3,</span><br><span class="line">           attribute: <span class="class">.Height</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: nil,</span><br><span class="line">           attribute: <span class="class">.NotAnAttribute</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">       v1.addConstraint(NSLayoutConstraint(item: v3,</span><br><span class="line">           attribute: <span class="class">.Trailing</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: v1,</span><br><span class="line">           attribute: <span class="class">.Trailing</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">       v1.addConstraint(NSLayoutConstraint(item: v3,</span><br><span class="line">           attribute: <span class="class">.Bottom</span>,</span><br><span class="line">           relatedBy: <span class="class">.Equal</span>,</span><br><span class="line">           toItem: v1,</span><br><span class="line">           attribute: <span class="class">.Bottom</span>,</span><br><span class="line">           multiplier: <span class="number">1</span>,</span><br><span class="line">           constant: <span class="number">0</span>))</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>附件：</p>
<center><img src="http://7xk67j.com1.z0.glb.clouddn.com/QQ20160406-2.png" alt="上面代码对应的结果，代码注释在github上"></center>

</blockquote>
<p>现在，我知道你在想什么😂。你一定在想：“你在干嘛，你这个疯子？那可是一大堆（boat）代码！”（除非你可能想要使用其他的四个词语而不是“boat”）但是这里有一些假象，我一会儿会证明我们刚刚做的比之前我们使用确定的frames和autoresizing创建的这个界面<strong>简单</strong>很多。</p>
<blockquote>
<p>译者注：直译的话真的很搞笑，但还是直译吧。😂</p>
</blockquote>
<p>毕竟，我们很少使用8个简单的代码创建8个<code>contraints</code>。(我会已经把每一行代码分成了多行，但那仅仅是格式的问题。)他们是冗长的，但是他们都是一些简单的代码与不同的参数的重复，所以创建他们仅仅是<strong>复制/粘贴</strong>。此外，我们创建的八个<code>contraints</code>确定了两个子view的position、size和layout行为，所以我们获得了直接的一跃。</p>
<p>更能说明问题的是，那些contraints相比设置frame和autoresizing是一种对将要达到的效果更加清晰的表达。子view的position只被描述了一次，同时所有的字view都会随着superview的改变而改变。这段描述是意味声长的,我们不用使用任意数学，就像我们之前调用那样：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let v3 = UIView(frame:CGRectMake(v1<span class="class">.bounds</span><span class="class">.width</span> - <span class="number">20</span>,</span><br><span class="line">v1<span class="class">.bounds</span><span class="class">.height</span> - <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure></p>
<p>这样做比较麻烦的是需要用superview的width和height减去该view的width和height才可以得到该view的position，这样做也是容易困惑和出错的。用了contraints之后，我们可以直接地说，constraints是清晰简单明了的，“v3宽为20points，高为20points，而且与v1的右下部齐平。”</p>
<p>初次之外，contraints可以做很多autoresizing不能做的事情。举个例子，除了给v2一个绝对的高度，我们还可以要求其高度为v1高度10分之一，而不管v1的size怎么变化。如果我们想做到那样而不用constraints的话，我们不得不继承layoutSubviews，在代码里手动完成。</p>
<blockquote>
<p>OVER<br><br>下一篇：Anchor notation<br><br>上一篇：<a href="http://qiuncheng.com/2016/04/04/35-Autolayout-translate-01/">Autolayout各个名词的解释</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前言：继上篇–翻译<a href="http://qiuncheng.com/2016/04/04/35-Autolayout-translate-01/">《Programing iOS9》- Autolayout篇（一）</a><br>上篇中只翻译了与Autolayout有关的词的含义。<br>这篇翻译“Create constraints in code”</p>
</blockquote>
<h3 id="Create_constraints_in_code">Create constraints in code</h3><p>我们已经准备好了用代码来写约束。我会在这里通过<code>NSLayoutConstraint</code>初始化方法<code>init(item:attribute:relateBy:toItem:attribute:multiplier:constant)</code>开始，同时设置好每一个约束的属性值，下面我也会描述他们的含义。（除了priority，它的初始值是1000，但是可以在后来设 置如果需要的话）<br ><br>接下来我会生成相同的view、subviews、布局行为像<strong>图1-12</strong>和<strong>图1-13</strong>那样，但是在这里应用constraints。注意到我不会想之前创建那样给subviews v2和v3确定的frames，因为constraints会给他们布局，与此同时，我记得设置他们的<code>translatesAutoresizingMaskIntoConstraints</code>属性为false：]]>
    
    </summary>
    
      <category term="Autolayout" scheme="http://qiuncheng.com/tags/Autolayout/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="翻译" scheme="http://qiuncheng.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Programing iOS9》翻译（一）-Autolayout名词含义]]></title>
    <link href="http://qiuncheng.com/2016/04/04/35-Autolayout-translate-01/"/>
    <id>http://qiuncheng.com/2016/04/04/35-Autolayout-translate-01/</id>
    <published>2016-04-04T06:36:35.000Z</published>
    <updated>2016-04-04T06:39:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="翻译《Programing_iOS9》-_Autolayout篇（一）">翻译《Programing iOS9》- Autolayout篇（一）</h2><blockquote>
<p>Autolayout各个名词的解释 <br><br>来自：《Programing.iOS.9.2015.11》59-61页</p>
</blockquote>
<h3 id="Autolayout">Autolayout</h3><p>AutoLayout对于每一个单独的view层次上是一个可选的技术。一个view可以在以下三种方式下选择Autolayout。</p>
<ul>
<li>你在代码中给一个view添加Autolayout约束。在这个约束下的view使用Autolayout。</li>
<li>你的app加载一个“Use Auto Layout”勾选的nib，每一个通过nib实例的view都使用了autolayout。</li>
<li><p>一个在interface下的view，而且它是你自定义的UIView的子类，在这个类方法<code>requiresConstraintBasedLayout</code>返回true，这个view也使用了Autolayout。<a id="more"></a></p>
<p>你通过第三种方式选择Autolayout的原因可能是你想要将Autolayout转换，来在代码中使用Autolayout constraints，一个通常的在代码中创建contraints的方式是在一个view的updateContraints的实现里面。但是如果Autolayout没有Switched，updateContraints不会被调用。所以说<code>requiresConstraintBasedLayout</code>提供了一种Switching on的方式。</p>
</li>
</ul>
<p>一个同胞view可以使用autolayout，但是另一个同胞view可以不使用，一个superview可以使用Autolayout，但是一些或者他所有的子view可以不使用。<br>但是Autolayout被应用到整个superview链，所以说如果一个view使用了Autolayout，<br>然后就自动应用到他的整个superviews，同时如果其中的view之一是控制器的main view的话，控制器<br>会收到自动布局相关的事件，否则的话就不会收到。</p>
<blockquote>
<p>你不可以对一个view的一部分关闭Autolayout。或者所有的来自nib实例化的view<br>使用了Autolayout，或者他们都使用了autoresizing。为了生成不同部分的interface来自<br>不同的nibs，其中一部分使用了autoresizing，另一部分使用了Autolayout，并且把这些不同的<br>部分分开到不同的nib（或者不同的Storyboard），然后在runtime里加载，编译。</p>
</blockquote>
<h4 id="Contraints">Contraints</h4><p>Autolayout contraint， 或者说简单的contraint，是一个NSLayoutContraint实例，<br>它描述了一个view的绝对width和height，或者是一个view的属性和另一个view的属性关系。<br>在后一种情况下，这种属性并不一定是相同的属性，同时这两个view也不一定是同胞关系或者父和子的关系。<br>唯一的要求就是他们来自同一个祖先view。</p>
<p>这里有一些NSLayoutContraint主要的属性：</p>
<ul>
<li><p><code>firstItem</code>, <code>firstAttribute</code>, <code>secondItem</code>, <code>secondAfttribute</code><br>这两个view和他们各自的属性（NSLaoyoutContraint）都和这个contraint有联系。<br>如果这个contraint描述了一个view的height或者width，另一个view可能是nil，另一个属性可能是<br><code>.NotAnAttribute</code>。其他的NSLayoutContraint有：</p>
<ul>
<li><code>.Top</code>, <code>.Bottom</code></li>
<li><code>.Left</code>, <code>.Right</code>, <code>.Leading</code>, <code>.Trailing</code></li>
<li><code>.Width</code>, <code>.Height</code></li>
<li><code>.CenterX</code>, <code>.CenterY</code></li>
<li><p><code>.FirstBaseline</code>, <code>LastBaseline</code></p>
<p><code>.FirstBaseline</code>主要应用于多个label之间，而且底部距离label的顶部有一定的距离。<br><code>.LastBaseline</code>指的是顶部距离底部有一定的距离。</p>
<p>其他的属性的含义是显而易见的，除了有可能想知道“leading”和“trailing”的含义，<br>他们就相当于“left”“right”，而且他们会自动反向他们的含义是“right-to-left”。<br>在新的iOS9上，全部的interface已经在系统上自动地反向了–但是这仅仅是当你使用了“leading”和“trailing”约束的时候。</p>
</li>
</ul>
</li>
<li><p><code>multiplier</code>, <code>constant</code></p>
<p>这两个属性会被应用到第二个属性值，然后他来决定第一个属性值。<code>multiplier</code>用来乘上第二个属性值，<code>constant</code>被添加到这个积数中。<br>第一属性被用来设置结果<em>The first attribute is set to the result.（这句话我也不懂是啥意思）</em>，（constant是一个非常有限的选择范围，因为这个值并不是一个常数。）<br>从根本上来讲，你写了一个等式：a1=m*a2+c,其中a1和a2就是两个属性值，m和c是multiplier和constant。最坏的情况是<br>当第一属性值等于第二属性值，其中multiplier等于1， constant等于0。如果你想要绝对的描述一个view的width和height，multiplier等于1，同时constant等于width或者height的值。</p>
</li>
<li><p><code>relation</code></p>
<p>一个NSLayoutContraint说明了这两个属性值和另外一个属性值之间的关系，就像被<br>multiplier和constant所修改的那样。这就是在前一段中我在等号左右的操作。（<code>.Equal</code>）<br>但是不平等（iindequality）也是允许的。（<code>.LessThanOrEqual</code>, <code>.GreaterThanOrEqual</code>）</p>
</li>
<li><p><code>priority</code></p>
<p>优先级值的范围是从1000到1，同时确定标准的行为有标准的优先级。约束可以有不同的优先级，来确定他们使用的顺序。</p>
</li>
</ul>
<p>一个约束属于一个view，同时一个view也可以有很多的约束。一个UIView添加一个约束属性可以有一下几种实例方法：<br><br>  <code>.addConstraint:</code>, <code>addConstraints:</code>  <br><br>  <code>.removeConstraint:</code>, <code>removeConstraints:</code> <br><br>存在的问题是约束属于哪一个view。答案是：最接近参与约束的两个视图层次结构的视图。<br>如果可能的话，那应该是这些view其中之一。举个例子来说，如果一个view讲述了一个view的width，<br>那它就属于这个view，如果它设置了这个view顶部的距离到他的父view顶部的距离的话，它就属于父view，<br>如果他校准了两个同胞view，那这个约束就属于他们共同的父view。<br></p>
<p>从iOS8开始，除了给一个特定的view添加明确的约束，你可以触发约束使用<code>NSLayoutContraint</code>类方法<code>activateContraints:</code><br>这个方法会取得所有约束的数组。被触发的约束也会被自动地添加到正确的view上。还有一个方法<code>deactivateContraints:</code>，他会移除该view所有的<br>约束。约束有一个活跃的属性，你可以设置它来触发或者是关闭一个单独的约束，同时再加上它可以告诉你<br>一个给定的约束是否为一个interface的一部分。<br></p>
<blockquote>
<p>说明：一旦你对一个view的position和size使用了明确的约束，随后不要设置他的frame（或者bounds和center）<br>只需要使用contraints就OK。否则的话，当<code>layoutSubviews</code>这个方法被调用的时候，这个视图会跳回到原来他约束规定位置。<br>（除非你在<code>layoutSubviews</code>里设置一个view的frame，我会在以后介绍。）</p>
</blockquote>
<h4 id="Autoresizing_contraints">Autoresizing contraints</h4><p>这个机制让其中选择了Autolayout的view可以在Autolayout层次上突然影响其他view，即使其他的view之前没有使用Autolayout。<br>所以说存在一种方式，当一个view在Autolayout上被影响的同时来通过constraints来保证它的position和layout在之前通过frame和autoresizingMask确定那样。<br>这种方式就是runtime，它将view的frame和autoresizingMask转换成约束。结果就是一些内在的来自<code>NSAutoresizingMasklayoutConstraint</code>的约束，影响这个view（当然他还可能和其他的view有联系）。<br>多亏了这个隐含的约束，被这个view的autoresizingMask描述的布局才可以继续工作。<br></p>
<p>比如:加入我有一个UILabel，它的frame为(20.0, 20.0, 42.0, 22.0), 然后它的autoresingMask为.None。如果这个label突然<em>使用</em>了Autolayout，<br>然后它的superview可能需要四个隐含的约束也就是设置它的width为42， height为22，它的centerX为41，它的centerY为31。<br></p>
<p>这个结果仅仅在这个view的<code>translatesAutoresizingMaskIntoConstraints</code>属性设置为true的时候。<br>如果这个view已经用代码实现了或者是一个nib的实例化当然nib的“Use Auto Layout”没有被勾选的话，上面就是默认的。<br>上面的假设的条件是一个view使用其他的方式创建，如果他被涉及到Autolayout你想要它的frame和autoresizingMask像constraints一样。</p>
<p>这是个合理的规则，但是也意味着如果你打算给你的view应用明确的约束，你可能需要记住通过设置view的translatesAutoresizingMaskIntoConstraints为false来关闭自动的行为。<br>如果你没有这样做，结果就是你的view中将包含隐含的约束和明确的约束，这不可能是你想要的。<br>按照传统来讲，这种情况往往会导致约束之间的冲突，（我会在下面解释的）。实际上，我们经常会发生不记得去设置view的translatesAutoresizingMaskIntoConstraints属性为false，<br>通常也是在我们得到一个约束之间冲突的时候被提醒到的。</p>
<blockquote>
<p>下一篇：Create contraints in code</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="翻译《Programing_iOS9》-_Autolayout篇（一）">翻译《Programing iOS9》- Autolayout篇（一）</h2><blockquote>
<p>Autolayout各个名词的解释 <br ><br>来自：《Programing.iOS.9.2015.11》59-61页</p>
</blockquote>
<h3 id="Autolayout">Autolayout</h3><p>AutoLayout对于每一个单独的view层次上是一个可选的技术。一个view可以在以下三种方式下选择Autolayout。</p>
<ul>
<li>你在代码中给一个view添加Autolayout约束。在这个约束下的view使用Autolayout。</li>
<li>你的app加载一个“Use Auto Layout”勾选的nib，每一个通过nib实例的view都使用了autolayout。</li>
<li><p>一个在interface下的view，而且它是你自定义的UIView的子类，在这个类方法<code>requiresConstraintBasedLayout</code>返回true，这个view也使用了Autolayout。]]>
    
    </summary>
    
      <category term="Autolayout" scheme="http://qiuncheng.com/tags/Autolayout/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="翻译" scheme="http://qiuncheng.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xcode7 真机测试出现 "The account ... has no team with ID ... 怎么办]]></title>
    <link href="http://qiuncheng.com/2016/03/21/34-xcode7-zhenjitiaoshi/"/>
    <id>http://qiuncheng.com/2016/03/21/34-xcode7-zhenjitiaoshi/</id>
    <published>2016-03-21T10:05:52.000Z</published>
    <updated>2016-03-21T10:24:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>一直以来我的Xcode7都不能真机调试，而且一直报一个问题。那就是:”The account #Apple ID# has no team with ID #team ID#</p>
</blockquote>
<p>我昨晚在网上找了好多方案，Google、Baidu、甚至连Bing都用过了，就是没找到解决方案，可是意外的时候发现了一篇博客，地址在<a href="http://www.jianshu.com/p/fc31a4a9d2f5" target="_blank" rel="external">这里</a>，从这个博客里可以看出，这确实Apple那边的原因。</p>
<p>Apple的效率果然高，一个工作日绝对给你回复。下面贴出我的回复内容，其他的具体步骤请移步那篇博客。<a id="more"></a></p>
<p><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOS%E9%82%AE%E4%BB%B6%E5%9B%9E%E5%A4%8D.jpg" alt="今天回复的邮件"></p>
<p><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20160321-0.png" alt="昨天回复的邮件"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>一直以来我的Xcode7都不能真机调试，而且一直报一个问题。那就是:”The account #Apple ID# has no team with ID #team ID#</p>
</blockquote>
<p>我昨晚在网上找了好多方案，Google、Baidu、甚至连Bing都用过了，就是没找到解决方案，可是意外的时候发现了一篇博客，地址在<a href="http://www.jianshu.com/p/fc31a4a9d2f5">这里</a>，从这个博客里可以看出，这确实Apple那边的原因。</p>
<p>Apple的效率果然高，一个工作日绝对给你回复。下面贴出我的回复内容，其他的具体步骤请移步那篇博客。]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于self和下划线_的区别]]></title>
    <link href="http://qiuncheng.com/2016/03/11/33-self-_-differ/"/>
    <id>http://qiuncheng.com/2016/03/11/33-self-_-differ/</id>
    <published>2016-03-11T03:36:20.000Z</published>
    <updated>2016-03-11T04:41:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天在做一个网络请求，在我自己的模型里包含三个变量；分别为：<code>name: CGFloat</code>、<code>id: NSInteger</code>、<code>count: NSInteger</code>； 在相关的<code>View</code>里有个数组,里面放的是模型数组。代码如下：</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)setCategory:(QCRecommendCategory *)category &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.category</span> = category;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.textLabel</span><span class="variable">.text</span> = category<span class="variable">.name</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之，发现报错了，错误信息如下：<br><code>warning: could not load any Objective-C class information. This will significantly reduce the quality of type information available.</code></p>
<p>于是就这种尝试解决这个错误，突然发现把上面代码中的<code>self.category</code>改为<code>_category</code>就好使了,当时不明白为什么，于是果断<code>Google</code>之,得到答案如下：</p>
<p>其实<code>self.xxx</code>是访问属性,实际上是去访问<code>setXXX</code>或者<code>getXXX</code>方法。所以我在<code>set</code>方法里用self是没用的, 但是对于你使用了<code>@property</code>来说,编译器已经帮你实现了这两方法，并且还自动创建了一个关联的实例变量，也就是<code>_xxx</code>,所以你会感觉不到。</p>
<p>举个例子：<br>比如你定义了一个变量<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位于`.h`文件里</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XXXX</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *x;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>那这里就有一堆隐藏的数据了,那就是：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *_x;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *)x &#123;</span><br><span class="line">    <span class="keyword">return</span> _x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setX:(<span class="built_in">NSString</span> *)x &#123;</span><br><span class="line">    _x = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天在做一个网络请求，在我自己的模型里包含三个变量；分别为：<code>name: CGFloat</code>、<code>id: NSInteger</code>、<code>count: NSInteger</code>； 在相关的<code]]>
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义TabBarButton Frame时VC title设置问题]]></title>
    <link href="http://qiuncheng.com/2016/03/11/32-tabbar-frame/"/>
    <id>http://qiuncheng.com/2016/03/11/32-tabbar-frame/</id>
    <published>2016-03-11T02:52:54.000Z</published>
    <updated>2016-03-11T12:05:23.000Z</updated>
    <content type="html"><![CDATA[<h5 id="问题描述：(我觉得这个问题用gif图片来表示更好。)">问题描述：(我觉得这个问题用gif图片来表示更好。)</h5><p><center><img src="http://7xk67j.com1.z0.glb.clouddn.com/mvtabbar.gif" alt=""></center><br>不知道你们有木有看的清楚，在这里解释一下，就是<code>tabbarController</code>里有五个<code>tabbarItem</code>,其中我把”我的关注”放在了第四个位置,”我”放在了第五个位置,但是当我点击第四个位置的”我的关注”之后呢,<a id="more"></a> 它突然跑到第五个位置.而原本在第五个位置的”我”呢跑到了第四个位置.</p>
<h5 id="问题描述与简易分析:">问题描述与简易分析:</h5><p>######与该问题有关的代码有：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.title</span> = <span class="string">@"我的关注"</span>;</span><br></pre></td></tr></table></figure></p>
<p>应该主要是这一段吧，其他的我描述一下就可以了。<br>首先重写了UITabBar，将其自带的UITabBarButton的frame重写，使其能够在中间添加一个按钮“+”<br>然后我在与“我的关注”有关的<code>Controller</code>里的<code>viewDidLoad</code>方法里写了<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.title</span> = <span class="string">@"我的关注"</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后问题就这样地产生了。  </p>
<p>但是为什么会这样的，我检查了添加这四个<code>Controller</code>的顺序,没有错呐,我又检查了与<code>TabBar</code>相关的代码,也没有什么问题呐..那就奇怪了.<br>奇就奇怪在<code>self.title = @&quot;我的关注&quot;;</code></p>
<p>让我们来分析一下，<code>self.title = @&quot;我的关注&quot;;</code>这段代码既设置了<code>NavigationController</code>的<code>title</code>,不用设置了<code>TabBarController</code>的<code>title</code>。 但是这里真的有一个问题，我在设置<code>tabBarItem</code> <code>frame</code>的时候是根据其子<code>View</code>的<code>index</code>来设置的. 当程序加载“我的关注”这个<code>view</code>的时候又重新加载了与”我的关注”这个TabBarItem的view，从而导致了tabbar里的字view的顺序发生了变化，本来应该是<strong>第三</strong>的，但是却变成了<strong>第四</strong>，所以这个<code>tabBarItem</code>的<code>frame</code>会发生变化..<br>在这里我附上设置这几个<code>tabBarItem``fram</code>的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> <span class="keyword">self</span><span class="variable">.subviews</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![view isKindOfClass:[<span class="built_in">UIControl</span> class]] || view == <span class="keyword">self</span><span class="variable">.addButton</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CGFloat</span> buttonX = w *((i &gt; <span class="number">1</span>)? (i + <span class="number">1</span>): i);</span><br><span class="line">    view<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(buttonX, y, w, h);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其中的addButton表示中间的那个添加按钮</span></span><br></pre></td></tr></table></figure>
<h5 id="问题解决:">问题解决:</h5><p>那么问题最终是怎么解决的呢、？<br>既然<code>self.title = @&quot;我的关注&quot;</code>有问题,那就改改他吧,要想设置<code>navigationController</code>的<code>title</code>然而又不想影响<code>tabBarController</code>的<code>title</code>,那就去<code>navigationController</code>里去找吧,果然,有一个<code>navigationItem.title</code>属性,那就去设置吧…最终改变的结果是:<br><code>self.navigationItem.title = @&quot;我的关注&quot;;</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="问题描述：(我觉得这个问题用gif图片来表示更好。)">问题描述：(我觉得这个问题用gif图片来表示更好。)</h5><p><center><img src="http://7xk67j.com1.z0.glb.clouddn.com/mvtabbar.gif" alt=""></center><br>不知道你们有木有看的清楚，在这里解释一下，就是<code>tabbarController</code>里有五个<code>tabbarItem</code>,其中我把”我的关注”放在了第四个位置,”我”放在了第五个位置,但是当我点击第四个位置的”我的关注”之后呢,]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你好2016，再见2015！]]></title>
    <link href="http://qiuncheng.com/2015/12/31/31-bye_2015-hello_2016/"/>
    <id>http://qiuncheng.com/2015/12/31/31-bye_2015-hello_2016/</id>
    <published>2015-12-31T08:20:03.000Z</published>
    <updated>2015-12-31T13:39:39.000Z</updated>
    <content type="html"><![CDATA[<p>人生的每个阶段都有着那个阶段的特殊意思。我们的大学也是这样。其实2015年应该是我进入大学里来最丰富、最充实的一年。在这一年里我明白了放弃也是一种美，明白了技术的神奇力量，明白了同学之间的情感原来可以这样，明白了原来美剧这么动人心弦，明白了原来<em>喜欢</em>的感觉是这样的……我明白了很多，也经历了很多，正是这些经历，让我成长，让我健壮。总结一下，<em>2015年上半年我是无知无畏的，2015年下半年我是已知的。</em><a id="more"></a></p>
<h2 id="Bye、2015">Bye、2015</h2><h4 id="2015上半年的无知无畏">2015上半年的无知无畏</h4><h6 id="生活上明白了放弃的力量的伟大">生活上明白了放弃的力量的伟大</h6><ul>
<li>放弃了<del>很好的可以当“领导”机会</del>，<br>或许如果我当时不那么固执，不那么倔强我还是有可能在“XX俱乐部”混下去的，这是为什么，真的不想回忆啊，这些算作是烦心事吧。算了，还是不要再讲了，当时自己真的不适合来管理俱乐部，包括心态和能力。根本不是党领导的料，你还拽什么拽！~~  </li>
<li>放弃了<del>还没有来得及追的女生朋友</del>，<br>呸呸呸，瞧你这话说的，什么叫你放弃了，你看上人家了，可是人家并没有看上你呀，你要是真的追人家，人家甩死你。而且唉，你每天都打扰人家好像已经对人家构成了<u><em>骚扰</em></u>了吧。😂我也不造算不算。反正就是后来我放弃了。但是我明白了喜欢一个女生的感觉，可能是我大学来第一个让我真正心动的吧。那种感觉很奇妙，就是她无时无刻不在你的身边，仿佛她就在周围，每回遇到什么事情第一个想起的就是她，经常在心里回味她讲过的话，有时也会默默微笑。好了，不YY了。正常点吧，都过去的事情了，而且跟人家早已经没有了联系，还这么说小心找不到女票了。</li>
<li>放弃了<del>走Android的技术路线</del>，<br>其实Android当初我只是入了门，仅仅是会了些控件而已，好多东西比如多线程控制、多媒体、SQLite数据存储、网络通信这些自己更是连一点点都不了解。而且不会这些你敢说你是写Android的。所以我对于Android的兴趣出发点仅仅是<strong>Material Design</strong>，然后这种兴趣点在自己用了iOS设备后发生骤变。尤其是在自己学习了<strong>Swift</strong>之后。于是决定不走Android的技术路线了。</li>
<li>放弃了本专业，全身心投入自己喜欢的事情上来，<br>当初自己的专业确实是自己选的，对于这个我没有任何怨言。我觉得选择自己真正喜欢的也没有任何错的。现在我喜欢iOS开发，所以我会毫不犹豫做iOS相关的东西来，而且你太关注本专业也会耽误你的时间不是嘛？<del>我还在担心自己当初挂了两科会不会对自己未来找工作有影响呢！！😭</del></li>
<li>……</li>
<li>总结下：放弃也是一种能力，放弃也是一种美，目标越多，就越应该考虑是不是应该放弃。</li>
</ul>
<h6 id="学习上了解了一颗浮躁的心不是学习的料，想要真正学习好，就要抛开一切，全力以赴。">学习上了解了一颗浮躁的心不是学习的料，想要真正学习好，就要抛开一切，全力以赴。</h6><ul>
<li>以前我在学习Android的时候总是有颗浮躁的心，我做什么都想着马上就做成，而不是日积月累，看书也看的大多是《21天精通Java编程》之类的书。完全没有丝毫挑战性。这就说明了程序猿这个东西是不能靠速成的。你必须全力以赴，抛开一切，否则你一定会被淘汰。</li>
<li>都说行百里者半九十，可是以前做事的时候总是快做好的时候不紧绷那颗心，偷偷掉链子。现在当自己想开之后发现以前的自己有多么蠢，那样不仅仅是在浪费时间，而且还是在偷偷消耗你的激情。你的兴趣也会渐渐被它磨灭，所以这种态度做事情往往不会成。</li>
<li>相反，我明白了我应该抱着学习的态度做事情，无论做什么要有计划，要有目标，要有行动。其实最主要的就是要有行动，想想看一旦有了行动，即使你自己不造自己做什么或者该做什么了，你也会给自己找事情做，你也会去发现，这样的结果往往是你成了大神。而且是真正学习上的大神。</li>
<li>还明白了如果想做一个程序猿，如果你不能凭借你自己的学习找到工作的话，你一定是不合适的，因为程序猿无时无刻不是在学习，技术正在发生这日新月异的革新，你不与时俱进，你就会被淘汰。况且现在的社会程序猿过于饱和，比你有能力大有人在，如果你不具备学习的能力，你一定会被淘汰。</li>
<li>其实总结下：还是多看书、多思考、多写代码。学海无涯，路无尽头！</li>
</ul>
<h6 id="技术上了解了很多方面相关的，最后得出的结论还是我不适合做专业相关的东西。">技术上了解了很多方面相关的，最后得出的结论还是我不适合做专业相关的东西。</h6><blockquote>
<p>其实我2015上半年在技术上没有做什么的，只有感恩！</p>
</blockquote>
<ul>
<li>沙画 | 一款Android端APP -  跟着一群基友们搞的一款用来参加2015挑战杯的作品。感谢他们，虽然我只是打了个酱油，到现在也仅仅是明白了实现绘图的原理，但是我还是写不出什么代码，只是打酱油似得写了个前端。总结下这个：就是无论怎么样，都要完成当时吹过的牛B | <u><em>其实这并不是我们吹得，只是我们老大@<a href="http://weibo.com/u/3807048816?topnav=1&amp;wvr=6&amp;topsug=1&amp;is_all=1" target="_blank" rel="external">凯哥</a>跟团委老师吹的 </em> </u>可是我们当时真的完成了，虽然在功能上有些欠缺。我当时还打算<strong>Open Source</strong>来着，可是所有源码被我弄丢了。</li>
<li><del>手机外设对讲机 | Android端App</del> - 怎么说呢，这款APP完全没我什么事， 让我一个Android初学者去开发Android底层的驱动，我觉得难度太大，就被自己的这种怯气吓走了。于是就没参与了，其实我当时也做了，做到了能播放PCM数据了，但是却远远达不到我们项目所要求的目标。所以最后只能找了其他的大神来做，听说后来做的还不错，但是我却没抓住这么好的学习的机会。总结下：这个项目我连酱油都没打，自己就放弃了。<br><del>Android现在自己已经没在学了，我想很大原因是当时自己只是入了个门，但是抱负太大，难以完成吧。😂</del></li>
</ul>
<hr>
<ul>
<li>学习javascript-html-css | 只是给自己建立个<a href="http://qiuncheng.com">博客</a> : 我知道自己学的不太好，目前已经忘了差不多了。可是感谢他们，我的<a href="http://qiuncheng.com">博客</a>成功建立（就是这个）我没用javascript也没用html-css，而是我阴差阳错的用了<a href="http://hexo.io" target="_blank" rel="external">hexo</a>，记得当时自己就突然发现了还有这么个博客系统，于是自己就尝试弄了个这个，自己感觉也不赖了呀，我之前用的是<a href="https://github.com/SuperKieran/TKL" target="_blank" rel="external">TKL</a>主题，可是发现太清新化了，于是果断换了这个具有程序员气息的主题。 | <em>个人感觉还不错吧。</em></li>
<li>学习了Python ：这个完全是自己在暑假没事瞎搞弄的，还想当然地要成为Python大神，可是仅仅是看了一两本书而已，而目前的水平也只是停留在只能写爬虫的阶段，Djando还没好好学自己就偷偷地看了《The Swift Programming Language》这本书。感谢Python，让我在Swift的路途上可以走的更远，因为他两的语法实在太相近了。<del>😂这应该是下半年的事情了。</del><br><em>2015上半年关于技术自己就这么点，感觉也没啥回忆的，可是写出来将来某一天自己可能看了呢！</em></li>
</ul>
<h4 id="2015_下半年自己是已知的">2015 下半年自己是已知的</h4><p>我为什么说自己2015下半年是已知的呢？其实还有个更好的词我不敢用<strong>有所准备的</strong>，我不敢说我一定是有所准备的，但是下半年我一定是已知的，从头到尾我都知道我自己在做什么，而且我一直都没有像上半年那样动摇过。<strong>叔本华</strong> 也曾讲过“我们承受所有不幸，皆因我们无法独处。”我现在学会了独处，这才是最重要的。初中老师也曾讲过，男人嘛，就是要耐得住寂寞，这样你才能成就大事。</p>
<h6 id="生活上不再追求时髦">生活上不再追求时髦</h6><ul>
<li>现在的我随意穿什么衣服出门，哪怕那衣服再破，只要干净点，我还是愿意穿在身上，因为我don’t care it，我的关注点在自己感兴趣的东西上。</li>
<li>现在的我不再去关注别人异样的眼光，就像<strong>亚里士多德</strong>说的那样“幸福属于那些容易得到满足的人”！而让我满足的条件也很简单 - 做自己喜欢的事情。</li>
<li>现在的我不着急找女票，因为我觉得这个世界上男女之间应该是对等的，必须有一男一女，而且你现在即使找到了一个女票，说不定你将来也会很快分掉，但是你工作之后就说不定了，那个时候你有本事能够养活人家姑娘，以及你和姑娘的孩子，那个时候你就可以名正言顺地找姑娘了。现在应该把握住机会好好训练点本事。</li>
</ul>
<h6 id="学习上懂得了静心才能学的进去">学习上懂得了静心才能学的进去</h6><ul>
<li>2015下半年我学会了看书，而且似乎每天看书成了必备。仿佛不看书心里就会有种罪恶感。而且看的不仅仅是技术相关的书，有时也会看看小说啥的。–要坚持–</li>
</ul>
<h6 id="技术上自己正在自己喜欢的iOS-Swift上奋斗ing">技术上自己正在自己喜欢的iOS-Swift上奋斗ing</h6><ul>
<li>我是在9月底接触的Swift，当时莫名其妙自己的iPad上多了本《The Swift Programming Language》，那段日子自己正在Python进阶，发现Swift和Python的语法实在太像了，于是果断读了起来，真的是毫无压力。于是就尝试着搞起iOS，发现比起Android来好搞多了，于是就一直在搞这个，而且自己也越来越喜欢做这个，发现很轻松就能写个小东西真的很具有成就感。</li>
<li>11月份自己开始学Objc，因为明年要找工作的原因，大部分公司用的还是Objc，所以目前做iOS开发还是要精通Objc的。</li>
<li>做了几个iOS的小Demo<ul>
<li>其中个人觉得最好的就是那个可以定制的<a href="https://github.com/qiuncheng/SegmentControllerCustom" target="_blank" rel="external">Segment</a></li>
</ul>
</li>
</ul>
<h4 id="2015_我看过的那些书">2015 我看过的那些书</h4><ul>
<li>《The Swift Programming Language》 - 我的Swift入门书</li>
<li>《AppCoda Beginning iOS 8 Programming with Swift》- 我的iOS入门书</li>
<li>《CoreAnimation_guide》没有完全懂</li>
<li>《iOS8 by Tutorial》这本书很不错的</li>
<li>《iOS Apprentice》很好的几个例子</li>
<li>《Producter》简约美</li>
<li>《Programming iOS9》还没有看完</li>
<li>《programming with objc》</li>
<li>《Effective Objective-c 2.0》</li>
<li>《Swift语言实战…》</li>
<li><del>《Android疯狂讲义》</del></li>
<li>《Python核心编程》没看完</li>
<li>《等风来》 - 貌似已经送人了</li>
<li>《盗墓笔记》 - 很好看，但没看完<br>-</li>
</ul>
<h4 id="2015_我去过的地方">2015 我去过的地方</h4><ul>
<li>5.1去了趟郑州</li>
<li>暑假去了【天津】父母那里</li>
<li>大学两年多了10.1去了趟长安大学和交大</li>
</ul>
<h4 id="2015_我值得自豪的事情">2015 我值得自豪的事情</h4><ul>
<li>懂得了一些道理</li>
<li>明白了一些事情</li>
<li>交了一些康神这样的技术朋友</li>
</ul>
<hr>
<h2 id="Hello、2016">Hello、2016</h2><ul>
<li>继续加油</li>
<li>继续iOS</li>
<li>多写代码<ul>
<li>马赛克</li>
<li>仿Android端Google Keep</li>
<li>同学录</li>
<li>……</li>
</ul>
</li>
<li>多看书<ul>
<li>《Core Data by Tutorial》</li>
<li>《iOS Animation by Tutorial》</li>
<li>《Functional Programming in Swift》</li>
<li>继续《Oreilly Programming ios9》</li>
<li>《现代操作系统》</li>
<li>《算法》</li>
<li>还有其他未购的书</li>
</ul>
</li>
<li>多思考</li>
<li>找个好工作</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>人生的每个阶段都有着那个阶段的特殊意思。我们的大学也是这样。其实2015年应该是我进入大学里来最丰富、最充实的一年。在这一年里我明白了放弃也是一种美，明白了技术的神奇力量，明白了同学之间的情感原来可以这样，明白了原来美剧这么动人心弦，明白了原来<em>喜欢</em>的感觉是这样的……我明白了很多，也经历了很多，正是这些经历，让我成长，让我健壮。总结一下，<em>2015年上半年我是无知无畏的，2015年下半年我是已知的。</em>]]>
    
    </summary>
    
      <category term="Life" scheme="http://qiuncheng.com/tags/Life/"/>
    
      <category term="回顾" scheme="http://qiuncheng.com/tags/%E5%9B%9E%E9%A1%BE/"/>
    
      <category term="Life" scheme="http://qiuncheng.com/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[马上就要考试了,我要坚持一月不上网(:~~~]]></title>
    <link href="http://qiuncheng.com/2015/12/20/30-blog-pause-update/"/>
    <id>http://qiuncheng.com/2015/12/20/30-blog-pause-update/</id>
    <published>2015-12-20T12:03:57.000Z</published>
    <updated>2015-12-20T12:23:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>2015年马上就要结束了，想想今年过的还挺快的。下周起也要大三上期期末考试了。~~~~这真是一个悲伤的故事。为了备考，我决定从明天起一直到放假都不再碰电脑了，不过书还是要看的(:-:)。。。  </p>
</blockquote>
<p>复(yu)习(xi)路很长，加油！<br>所以<del>找不到我</del>（见了下图）一定不要惊讶。<a id="more"></a><br><img src="http://7xk67j.com1.z0.glb.clouddn.com/bg_404_197cad791f518e37b47f7264221bab94.png" alt="404 Not Found."><br><br></p>
<blockquote>
<p><u>因为我一定在远方默默复习！呼吸学习气息！</u>  </p>
</blockquote>
<p><img src="http://7xk67j.com1.z0.glb.clouddn.com/mv1.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>2015年马上就要结束了，想想今年过的还挺快的。下周起也要大三上期期末考试了。~~~~这真是一个悲伤的故事。为了备考，我决定从明天起一直到放假都不再碰电脑了，不过书还是要看的(:-:)。。。  </p>
</blockquote>
<p>复(yu)习(xi)路很长，加油！<br>所以<del>找不到我</del>（见了下图）一定不要惊讶。]]>
    
    </summary>
    
      <category term="Life" scheme="http://qiuncheng.com/tags/Life/"/>
    
      <category term="Life" scheme="http://qiuncheng.com/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于我是用过的iOS数据存储的一些总结[未完待续]]]></title>
    <link href="http://qiuncheng.com/2015/12/11/29-ios-persist-data-not-over/"/>
    <id>http://qiuncheng.com/2015/12/11/29-ios-persist-data-not-over/</id>
    <published>2015-12-11T06:48:57.000Z</published>
    <updated>2015-12-11T06:48:57.000Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><blockquote>
<p>关于自己目前学习遇到过的数据存储相关的一些总结，同时也是味了方便自己在将来开发过程中回顾。  </p>
</blockquote>
<hr>
<h4 id="正文">正文</h4><h5 id="1-_Use_the_NSCoding_protocol_to_read_and_write_data-">1. Use the NSCoding protocol to read and write data.</h5><p>这个是我在完成了Apple官方推出的<a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" target="_blank" rel="external">Start Developing iOS Apps (Swift)</a>这个小小的Demo之后认识的一个<code>Persist Data</code>方式。也是我遇到的第一个数据存储方式，它就像我的初恋一般，每回我想存储数据我就第一个会想起它来，虽然大多数情况下用不上。<br>下面我简单总结下这种<code>Persist Data</code>:</p>
<ul>
<li>需要使用到的协议：<code>NSCoding</code></li>
<li><p>需要使用到协议<code>NSCoding</code>中的方法：<a id="more"></a></p>
<ol>
<li><figure class="highlight"><figcaption><span>encodeWithCoder(aCoder: NSCoder)  ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. ```init(coder aDecoder: NSCoder)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>使用方式：  </p>
<ol>
<li><p>将你要保存的数据进行归档</p>
<ul>
<li>使用<code>encodeWithCoder</code>方法：</li>
<li>例如：<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func encodeWithCoder(aCoder: <span class="built_in">NSCoder</span>) &#123;</span><br><span class="line">    aCoder<span class="variable">.encodeObject</span>(name, forKey: PropertyKey<span class="variable">.nameKey</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>在这里需要注意的是你必须为<code>name</code>属性提供key，这个key将来在解码的时候会用到。</strong></p>
</li>
<li><p>将数据进行解档（姑且先这么说吧，就是unarchive）</p>
<ul>
<li>使用<code>init(coder aDecoder: NSCoder)</code></li>
<li><p>例如：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">required convenience init?(coder aDecoder: <span class="built_in">NSCoder</span>) &#123;</span><br><span class="line">    let name = aDecoder<span class="variable">.decodeObjectForKey</span>(PropertyKey<span class="variable">.nameKey</span>) as! String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是这里用到了上面的key，这里还用到了convenience，那就需要调用<code>designated init</code>方法了，不过这个Xcode会有提示的。</strong></p>
</li>
</ul>
</li>
<li><p>为你的data创建一个路径。</p>
<ul>
<li><p>具体操作如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> let DocumentsDirectory = <span class="built_in">NSFileManager</span>()<span class="variable">.URLsForDirectory</span>(<span class="variable">.DocumentDirectory</span>, inDomains: <span class="variable">.UserDomainMask</span>)<span class="variable">.first</span>!</span><br><span class="line"><span class="keyword">static</span> let ArchiveURL = DocumentsDirectory<span class="variable">.URLByAppendingPathComponent</span>(<span class="string">"meals"</span>)</span><br></pre></td></tr></table></figure>
<p><strong>注意下在这里你使用了static方法将来在调用的时候直接使用类名即可。</strong></p>
</li>
</ul>
</li>
<li>接下来比较主要的就是保存和使用数据了。<ul>
<li>这里比较主要就是两句  <figure class="highlight"><figcaption><span>toFile: Meal.ArchiveURL.path!)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```NSKeyedUnarchiver.unarchiveObjectWithFile(Meal.ArchiveURL.path!) as? [Meal]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<hr>
<h5 id="2-_使用NSUserDefault保存数据（虽然我知道这种方式，但是仔细翻了下自己的Demo，发现竟然没有相关的Demo。让我哭会~）">2. 使用<code>NSUserDefault</code>保存数据（<del>虽然我知道这种方式，但是仔细翻了下自己的Demo，发现竟然没有相关的Demo。让我哭会</del>~）</h5><p>但是我又看了下官方文档，感觉这个真的没啥好说的，一般用来设置啥的，以后遇到了再看吧，不过我简单用一个例子介绍下吧。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userDefault = <span class="type">NSUserDefaults</span>()</span><br><span class="line">userDefault.setBool(<span class="literal">true</span>, forKey: <span class="string">"marry"</span>)</span><br><span class="line">userDefault.setObject(<span class="string">"zhangsan"</span>, forKey:<span class="string">"name"</span>)</span><br><span class="line">userDefault.setInteger(<span class="number">19</span>, forKey: <span class="string">"age"</span>)</span><br><span class="line"><span class="keyword">var</span> name = userDefault.valueForKey(<span class="string">"name"</span>)</span><br><span class="line"><span class="built_in">print</span>(name!)</span><br></pre></td></tr></table></figure></p>
<p><strong>这里的打印结果是<code>zhangsan</code></strong><br><em>我猜测一般应用的启动界面应该就是用的这个NSUserDefault保存的。大致就是当用户在第一次启动的之后就将那个Flag设置为false，并且今后不更新应用不改变那个值。</em></p>
<hr>
<h5 id="3-_使用Plist保存数据">3. 使用<code>Plist</code>保存数据</h5><p>这个我只是在书上看到过，不过幸亏自己也做了小Demo。<br>    比如：在我的Demo里我新建了一个<code>data.plist</code>,如下面图片所示：<br>    <img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151210-0.png" alt=""><br>    然后我在ViewController里调用读取这个plist里的文件。代码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let dict = <span class="built_in">NSDictionary</span>(contentsOfURL: <span class="built_in">NSURL</span>(fileURLWithPath: <span class="built_in">NSBundle</span><span class="variable">.mainBundle</span>()<span class="variable">.pathForResource</span>(<span class="string">"data"</span>, ofType: <span class="string">"plist"</span>)!))</span><br><span class="line">        </span><br><span class="line">print(dict!) <span class="comment">//打印出这个dict</span></span><br><span class="line">let name:[String] = dict![<span class="string">"name"</span>] as! [String]</span><br><span class="line">print(<span class="string">"names为：\(name)"</span>) <span class="comment">//打印出所有的名字</span></span><br><span class="line">        </span><br><span class="line">let ages:[String] = dict![<span class="string">"age"</span>] as! [String]</span><br><span class="line">let age:[String] = dict?<span class="variable">.valueForKey</span>(<span class="string">"age"</span>) as! [String]</span><br><span class="line"><span class="comment">//上面两种方式调用dict里面的东西相同</span></span><br><span class="line">print(<span class="string">"ages 为：\(ages)"</span>)</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure></p>
<p>在这里打印的结果为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    age =     (</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">19</span>,</span><br><span class="line">        <span class="number">20</span></span><br><span class="line">    );</span><br><span class="line">    name =     (</span><br><span class="line">        Zhangsan,</span><br><span class="line">        lisi,</span><br><span class="line">        wangwu</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">names为：[<span class="string">"Zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</span><br><span class="line">ages 为：[<span class="string">"18"</span>, <span class="string">"19"</span>, <span class="string">"20"</span>]</span><br><span class="line">[<span class="string">"18"</span>, <span class="string">"19"</span>, <span class="string">"20"</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>成功的读取了Plist里的数据。写入plist也类似，需要用到方法<code>writeToPath</code></strong></p>
<hr>
<h5 id="4-_使用CoreData">4. 使用<code>CoreData</code></h5><p>有很多人说<code>CoreData</code>不好用，还一直在推荐<code>Realm</code>,不过对于我这种新手来说，真的无所谓，我先学会是用如何使用<code>CoreData</code>在说吧，毕竟<code>CoreData</code>是apple自己推出的，也算是最基本的吧，<code>Realm</code>是第三方的，你连这最基本的都不会用还怎么用第三方呢？所以我目前还是处于学会如何使用方面，好多原理不太懂，不过我相信随着我学习的加深，我会在后来对他们有一个清晰的认识的，先对自己说声加油哈！  </p>
<ul>
<li>在新建工程的时候勾选CoreData选项<br>  这样在你的项目AppDelegate.swift就会生成<code>// MARK: - Core Data stack</code>与<code>// MARK: - Core Data Saving support</code>的文件。这两个标记中含有的代码就与你使用CoreData有关系的。<br>  同时在你的文件夹结构里会自动建立<code>xxx.xcdatamodel</code>，其中的<code>xxx</code>表示的是你的<code>AppDelegate.swift</code>里的<code>NSBundle.mainBundle().URLForResource(&quot;htiList&quot;, withExtension: &quot;momd&quot;)!</code>对应的名字。</li>
<li>接下来在<code>xxx.xcdatamodel</code>创建数据实体。比如我们在这里创建了一个车<code>Person</code>的实体。<br>  注意：<u>在CoreData里一个实体<code>Entity</code>就相当于一个类。</u><br>如下图：<br><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151211-0.png" alt="创建实体后结果"></li>
<li><p>接下来就可以保存数据到Core Data了。</p>
<ol>
<li>首先<code>import CoreData</code></li>
<li>更换模型<code>var people = [NSManagedObject]()</code></li>
<li><p>实现保存</p>
 <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    func saveName(name: String) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 获取delegate的一个引用</span></span><br><span class="line">let appDelegate =</span><br><span class="line"><span class="built_in">UIApplication</span><span class="variable">.sharedApplication</span>()<span class="variable">.delegate</span> as! AppDelegate</span><br><span class="line"><span class="comment">// 获取NSManagedObjectContext</span></span><br><span class="line">let managedContext = appDelegate<span class="variable">.managedObjectContext</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2插入一个对象到managed object context中</span></span><br><span class="line">let entity =  <span class="built_in">NSEntityDescription</span><span class="variable">.entityForName</span>(<span class="string">"Person"</span>,</span><br><span class="line">    inManagedObjectContext:managedContext)</span><br><span class="line"></span><br><span class="line">let person = <span class="built_in">NSManagedObject</span>(entity: entity!,</span><br><span class="line">    insertIntoManagedObjectContext: managedContext)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">person<span class="variable">.setValue</span>(name, forKey: <span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    try managedContext<span class="variable">.save</span>()</span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    people<span class="variable">.append</span>(person)</span><br><span class="line">&#125; catch let error as <span class="built_in">NSError</span>  &#123;</span><br><span class="line">    print(<span class="string">"Could not save \(error), \(error.userInfo)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">fetchData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取Core data 中的数据</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">let</span> appDelegate =</span><br><span class="line">    <span class="type">UIApplication</span>.sharedApplication().delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> managedContext = appDelegate.managedObjectContext</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">let</span> fetchRequest = <span class="type">NSFetchRequest</span>(entityName: <span class="string">"Person"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> results =</span><br><span class="line">        try managedContext.executeFetchRequest(fetchRequest)</span><br><span class="line">        people = results <span class="keyword">as</span>! [<span class="type">NSManagedObject</span>]</span><br><span class="line">    &#125; catch <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Could not fetch <span class="subst">\(error)</span>, <span class="subst">\(error.userInfo)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p><span style="color:orange">好了，应该总结的够多了吧，不过未完待续…</span></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><blockquote>
<p>关于自己目前学习遇到过的数据存储相关的一些总结，同时也是味了方便自己在将来开发过程中回顾。  </p>
</blockquote>
<hr>
<h4 id="正文">正文</h4><h5 id="1-_Use_the_NSCoding_protocol_to_read_and_write_data-">1. Use the NSCoding protocol to read and write data.</h5><p>这个是我在完成了Apple官方推出的<a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1">Start Developing iOS Apps (Swift)</a>这个小小的Demo之后认识的一个<code>Persist Data</code>方式。也是我遇到的第一个数据存储方式，它就像我的初恋一般，每回我想存储数据我就第一个会想起它来，虽然大多数情况下用不上。<br>下面我简单总结下这种<code>Persist Data</code>:</p>
<ul>
<li>需要使用到的协议：<code>NSCoding</code></li>
<li><p>需要使用到协议<code>NSCoding</code>中的方法：]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你的4寸iPhone出现上下黑框了吗？]]></title>
    <link href="http://qiuncheng.com/2015/12/08/28-iOS-black-autolayout/"/>
    <id>http://qiuncheng.com/2015/12/08/28-iOS-black-autolayout/</id>
    <published>2015-12-08T11:29:00.000Z</published>
    <updated>2015-12-08T12:41:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>对于iOS新手来说，其中最困难也是最麻烦的就包括AutoLayout，但是之前我从来都没有注意到这个，以为自己看了点AutoLayout的东西就可以随意想象，不多用它，所以导致的结果就是我以前写的程序在iPhone4和4s上运行的很好，但是当遇到iPhone5之后，却发现出现了上下黑框，这让我这个新手很是气愤，然后我拿iPhone6测试也一样黑框，但是我在preview里好好的，什么都能够正常显示，这是为什么，于是我就各种百度，bing，Google，果然功夫不负有心啊，我在Google上找到了答案。  <a id="more"></a></p>
</blockquote>
<center><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151208-0.png" alt="可爱的黑框框"></center><br>问题已经描述的很清楚了吧，接下来我们就来看看解决方案吧。<br><br><strong>1.</strong> 确定你的<code>Use Auto Layout</code>和<code>Size Size Classes</code>是勾选上的<br><center><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151208-1.png" alt=""></center><br><strong>2.</strong> 确定你的<code>ViewController</code>的<code>Layout</code>是<code>wAny</code>、<code>hAny</code>类型的。<br><center><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151208-2.png" alt=""></center><br><strong>3.</strong> 确定你的相关的<code>Contraints</code>是适配<code>AutoLayout</code>。（这个没人能够帮你了，只能靠你自己去理解AutoLayout相关的约束了，并设定了)<br><strong>4.</strong> 为了适配所有不同屏幕大小的iPhone，你必须提供相关的背景图片（如：@2x, @3x，这个应该都知道吧，你在放图片到文件夹里的时候Xcode里会有三个相关提示吧！）<br><strong>5.</strong> 你必须提供<code>LaunchScreen</code>,其实我昨天的问题就出现在这里，没有提供<code>LaunchScreen</code>，就像这样，在<code>show the file inspector</code>里勾选<code>Use Auto Layout</code>、<code>Size Size Classes</code>和<code>Use as Launch Screen</code>。<br><center><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151208-4.png" alt=""><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151208-3.png" alt=""></center>

<p><em>Ok, 如果这样的话你的应用还是会出现上下黑框的话，我觉得你应该重新在检查下以上步骤。有一条不满足，很可能就是导致出现黑框的原因，另外提示下，注意善于利用<code>Preview</code>。</em><br><em>请记住，它这不仅仅是一个摆设。</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>对于iOS新手来说，其中最困难也是最麻烦的就包括AutoLayout，但是之前我从来都没有注意到这个，以为自己看了点AutoLayout的东西就可以随意想象，不多用它，所以导致的结果就是我以前写的程序在iPhone4和4s上运行的很好，但是当遇到iPhone5之后，却发现出现了上下黑框，这让我这个新手很是气愤，然后我拿iPhone6测试也一样黑框，但是我在preview里好好的，什么都能够正常显示，这是为什么，于是我就各种百度，bing，Google，果然功夫不负有心啊，我在Google上找到了答案。]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这就是生活！]]></title>
    <link href="http://qiuncheng.com/2015/12/01/25-life-12-1-/"/>
    <id>http://qiuncheng.com/2015/12/01/25-life-12-1-/</id>
    <published>2015-12-01T02:34:31.000Z</published>
    <updated>2015-12-01T02:55:04.000Z</updated>
    <content type="html"><![CDATA[<p>时间过得真快，今天都12月份了。马上又要到新的一年了。但是在这本该高兴地时候我却怎么也提不起神来，心情突然就像这西安的雾霾一样严重。。。<br>十分钟之前我还在刷<a href="https://twitter.com/qiuncheng" target="_blank" rel="external">Twitter</a>,还在<a href="http://stackoverflow.com/users/5353887/qiuncheng" target="_blank" rel="external">stackoverflow</a>上提问题，但是此刻当我看向窗外，看向外面白茫茫的一片，我突然有种失落感。我们现在的生活基本都是出门不靠走路，都是这样的天气让人怎么出门，这样的天气让人怎么不靠走路？我忽然想到有天要是我有了儿子，他出生的时候或许雾霾比现在还要严重些吧。（<em>虽然现在还没女票，让我小小的YY下’:)</em>）  <a id="more"></a><br>但是当我深思些的时候却发现我的心情和雾霾并没有太大关系，只是雾霾引起了我的深思。我主要还在想期末快结束了，而我计划的12月开始复习也已经开始了，虽然我并没有开始复习，但是却反映出时间不等你的问题。最近的两个月可能是我最充实的两个月，大学的前两年真的知道怎么就这么过来了唉，但是从10月份自己接触iOS以来我觉得自己的每一天都是那么充实，每一天都有忙不完的事情，每一天都在按计划进行着一系列的安排。大学四年转眼间匆匆而逝，不发现点自己真正喜欢的东西真的有点对不起自己。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间过得真快，今天都12月份了。马上又要到新的一年了。但是在这本该高兴地时候我却怎么也提不起神来，心情突然就像这西安的雾霾一样严重。。。<br>十分钟之前我还在刷<a href="https://twitter.com/qiuncheng">Twitter</a>,还在<a href="http://stackoverflow.com/users/5353887/qiuncheng">stackoverflow</a>上提问题，但是此刻当我看向窗外，看向外面白茫茫的一片，我突然有种失落感。我们现在的生活基本都是出门不靠走路，都是这样的天气让人怎么出门，这样的天气让人怎么不靠走路？我忽然想到有天要是我有了儿子，他出生的时候或许雾霾比现在还要严重些吧。（<em>虽然现在还没女票，让我小小的YY下’:)</em>）]]>
    
    </summary>
    
      <category term="Life" scheme="http://qiuncheng.com/tags/Life/"/>
    
      <category term="Life" scheme="http://qiuncheng.com/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一张图帮你集齐所有git命令]]></title>
    <link href="http://qiuncheng.com/2015/11/24/25-git-command-all/"/>
    <id>http://qiuncheng.com/2015/11/24/25-git-command-all/</id>
    <published>2015-11-24T13:17:07.000Z</published>
    <updated>2015-11-24T13:25:09.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>请别小看我哈，我可是大自然的搬运工吆~  </p>
</blockquote>
<p>继上篇博文展示了git的部分常用命令的使用，这回在网上突然看到一张神奇的图片，真的是神器图片，这张图包含了所有的git命令，非常全面。所以就直接搬运过来了。</p>
<p>原图来自极分享，网址<a href="http://www.finalshares.com/read-178" target="_blank" rel="external">http://www.finalshares.com/read-178</a>    </p>
<ul>
<li>图片很大，请先擦亮眼睛看好了~~<a id="more"></a><br><img src="http://7xk67j.com1.z0.glb.clouddn.com/gitgit命令大全.jpg" alt="这是一张神奇的图片"></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>请别小看我哈，我可是大自然的搬运工吆~  </p>
</blockquote>
<p>继上篇博文展示了git的部分常用命令的使用，这回在网上突然看到一张神奇的图片，真的是神器图片，这张图包含了所有的git命令，非常全面。所以就直接搬运过来了。</p>
<p>原图来自极分享，网址<a href="http://www.finalshares.com/read-178">http://www.finalshares.com/read-178</a>    </p>
<ul>
<li>图片很大，请先擦亮眼睛看好了~~]]>
    
    </summary>
    
      <category term="git" scheme="http://qiuncheng.com/tags/git/"/>
    
      <category term="git" scheme="http://qiuncheng.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客添加了访问次数记录]]></title>
    <link href="http://qiuncheng.com/2015/11/22/24-hexo-firebase-record-time/"/>
    <id>http://qiuncheng.com/2015/11/22/24-hexo-firebase-record-time/</id>
    <published>2015-11-22T13:09:44.000Z</published>
    <updated>2015-11-22T13:24:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>想看记录请滑动到最底部，HaHa~~</p>
</blockquote>
<p>意外的时刻发现了别人的博客底部还有访问次数统计，于是果断给自己的博客也弄了一个呐，用的是<a href="www.firebase.com">firebase</a>,不多说，下面我给大家几个资源，让你的hexo博客系统也具有访问次数统计吧。<br>都是别人写好的比较好的文章：  </p>
<ul>
<li><a href="http://www.pangjian.info/2015/02/27/realtime-count-firebase/#more" target="_blank" rel="external">基于Firebase的Hexo博客实时访问数统计</a></li>
<li><a href="http://ibruce.info/2013/12/22/count-views-of-hexo/" target="_blank" rel="external">为hexo博客添加访问次数统计功能</a></li>
</ul>
<p>万事万物都是有优缺点的，firebase也不例外，最大缺点就是显示很慢，估计是被墙的原因。有点就不说了，你懂就行！</p>
<blockquote>
<p>说明：第一个链接中给的代码中后面一段firebase的javascript（从new一个Firebase对象一直到最后）代码可以直接以script的形式放在footer的底部，亲测可用，因为我就是这样做的。~~</p>
</blockquote>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>想看记录请滑动到最底部，HaHa~~</p>
</blockquote>
<p>意外的时刻发现了别人的博客底部还有访问次数统计，于是果断给自己的博客也弄了一个呐，用的是<a href="www.firebase.com">firebase</a>,不多说，下面我给大家几个资源，让你的hexo博客系统也具有访问次数统计吧。<br>都是别人写好的比较好的文章：  </p>
<ul>
<li><a href="http://www.pangjian.info/2015/02/27/realtime-count-firebase/#more">基于Firebase的Hexo博客实时访问数统计</a></li>
<li><a href="http://ibruce.info/2013/12/22/count-views-of-hexo/">为hexo博客添加访问次数统计功能</a></li>
</ul>
<p>万事万物都是有优缺点的，firebase也不例外，最大缺点就是显示很慢，估计是被墙的原因。有点就不说了，你懂就行！</p>
<blockquote>
<p>说明：第一个链接中给的代码中后面一段firebase的javascript（从new一个Firebase对象一直到最后）代码可以直接以script的形式放在footer的底部，亲测可用，因为我就是这样做的。~~</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://qiuncheng.com/tags/Hexo/"/>
    
      <category term="Life" scheme="http://qiuncheng.com/tags/Life/"/>
    
      <category term="Hexo" scheme="http://qiuncheng.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[error: Your local changes to the following files would be overwritten by checkout以及git常用命令]]></title>
    <link href="http://qiuncheng.com/2015/11/21/23-git-error-checkout/"/>
    <id>http://qiuncheng.com/2015/11/21/23-git-error-checkout/</id>
    <published>2015-11-21T14:55:07.000Z</published>
    <updated>2015-12-11T06:54:02.000Z</updated>
    <content type="html"><![CDATA[<h5 id="git_问题回忆录">git 问题回忆录</h5><p>最近使用git一直遇到问题，前段时间还把自己的工程项目全部删除了，真的是苦恼，这次决心要把git吃个遍，可是刚学会了如何新建Branch，却发现自己缺了点东西，不知道怎么把分支同步到master，真的是郁闷，总不能一直让我在github官网上删除同步吧。<br>可是多谢万能的<strong>Google</strong> #此处略去三千字#，让我迅速找到了相关命令，没错，就是它<br><code>git checkout master</code> 先切换到主分支。<br><code>git merge &#39;branch name&#39;</code>  将分支合并到主分支。<br>可是依然有问题，<code>error: Your local changes to the following files would be overwritten by checkout</code>,就是在题目中给出的问题。<br>感谢万能的<code>stackoverflow</code>，不仅帮我解决了iOS上的问题，更是帮我解决了git的大问题。鉴于<code>stackoverflow</code>国内被墙，我还是截张图片来吧，<a id="more"></a><br><img src="http://7xk67j.com1.z0.glb.clouddn.com/gitQQ20151121-0.png" alt="解决方案"><br>大致分析下就是你的分支里有文件修改了还没有保存，其实我是保存过的，我还特地进了Xcode去保存了下，但是这里不知道这是为什么。按着这个人的回答做就是了，果然没错，成功切换到master，并合并到主分支。 哈哈，其实也蛮简单的，就是第一次用就遇到这么大的问题有点让我不甘心呐！<br>好了，既然讲到git，我就在网上找了一些git的常用命令，<strong>转发转发转发</strong>重要的事情说三遍。文章末尾我也附上原文链接。   </p>
<hr>
<h5 id="git常用命令【转载】">git常用命令【转载】</h5><blockquote>
<h3 id="新建repository">新建repository</h3></blockquote>
<p>本地目录下，在命令行里新建一个代码仓库（repository）<br>里面只有一个README.md<br>命令如下：  </p>
<h4 id="touch_README-md">touch README.md</h4><h4 id="git_init">git init</h4><p>初始化repository  </p>
<h4 id="git_add_README-md"><code>git add README.md</code></h4><p>将README.md加入到缓存区   </p>
<p><em>可以用<strong><code>git add --a</code></strong>将所有改动提交到缓存（注意是两个杠）</em></p>
<h4 id="git_commit_-m_&quot;first_commit&quot;"><code>git commit -m &quot;first commit&quot;</code></h4><p>提交改变，并且附上提交信息”first commit”</p>
<blockquote>
<h3 id="push">push</h3></blockquote>
<h4 id="git_remote_add_origin_https://github-com/XXX(username)/YYYY(projectname)-git"><code>git remote add origin  https://github.com/XXX(username)/YYYY(projectname).git</code></h4><p>加上一个remote的地址，名叫origin，地址是github上的地址（Create a new repo就会有）<br><em>因为Git是分布式的，所以可以有多个remote.</em>  </p>
<h4 id="git_push_-u_origin_master"><code>git push -u origin master</code></h4><p>将本地内容push到github上的那个地址上去。<br><code>参数-u</code><br>用了参数-u之后，以后就可以直接用不带参数的git pull从之前push到的分支来pull。<br>此时如果origin的master分支上有一些本地没有的提交,push会失败,<br>所以解决的办法是, 首先设定本地master的上游分支:</p>
<h4 id="git_branch_-set-upstream-to=origin/master"><code>git branch --set-upstream-to=origin/master</code></h4><p>然后pull:    </p>
<h4 id="git_pull_-rebase"><code>git pull --rebase</code></h4><p>最后再push:  </p>
<h4 id="git_push"><code>git push</code></h4><blockquote>
<h3 id="分支">分支</h3></blockquote>
<p>新建好的代码库有且仅有一个主分支（master），它是自动建立的。<br>可以新建分支用于开发：</p>
<h4 id="git_branch_develop_master"><code>git branch develop master</code></h4><p>新建一个叫develop的分支，基于master分支<br>切换到这个分支：</p>
<h4 id="git_checkout_develop"><code>git checkout develop</code></h4><p>现在可以在这个develop分支上做一些改动，并且提交。<br>注意：切换分支的时候可以发现，在Windows中的repository文件夹中的文件内容也会实时相应改变，变成当前分支的内容。</p>
<ul>
<li><h4 id="push方法1：">push方法1：</h4></li>
</ul>
<p>现在如果想直接Push这个develop分支上的内容到github</p>
<h4 id="git_push_-u_origin"><code>git push -u origin</code></h4><p>如果是新建分支第一次push，会提示：<br>fatal: The current branch develop has no upstream branch.<br>To push the current branch and set the remote as upstream, use</p>
<h4 id="git_push_-set-upstream_origin_develop"><code>git push --set-upstream origin develop</code></h4><p>输入这行命令，然后输入用户名和密码，就push成功了。</p>
<p>以后的push就只需要输入git push origin</p>
<ul>
<li><h4 id="push方法2：">push方法2：</h4></li>
</ul>
<p>比如新建了一个叫dev的分支，而github网站上还没有，可以直接：</p>
<h4 id="git_push_-u_origin_dev"><code>git push -u origin dev</code></h4><p>这样一个新分支就创建好了。</p>
<ul>
<li><h4 id="push方法3：">push方法3：</h4></li>
</ul>
<p>提交到github的分支有多个，提交时可以用这样的格式：</p>
<h4 id="git_push_-u_origin_local:remote"><code>git push -u origin local:remote</code></h4><h4 id="比如_git_push_-u_origin_master:master">比如 <code>git push -u origin master:master</code></h4><p>表明将本地的master分支（冒号前）push到github的master分支（冒号后）。<br>如果左边不写为空，将会删除远程的右边分支。</p>
<blockquote>
<h3 id="创建分支的另一种方法">创建分支的另一种方法</h3></blockquote>
<h4 id="用命令git_checkout_-b_develop2_develop">用命令<code>git checkout -b develop2 develop</code></h4><p>可以新建一个分支develop2，同时切换到这个分支</p>
<blockquote>
<h3 id="删除分支">删除分支</h3></blockquote>
<h4 id="查看所有的分支_git_branch">查看所有的分支 <code>git branch</code></h4><h4 id="删除develop2分支_git_branch_-d_develop2">删除develop2分支 <code>git branch -d develop2</code></h4><blockquote>
<h3 id="Clone">Clone</h3></blockquote>
<p>使用git clone+github地址的方法，项目默认只有master分支。git branch也只有master</p>
<p>要看所有的分支：<code>git branch -a</code>或者是<code>git branch -r</code></p>
<p>这时候要新建一个分支，叫做dev，基于远程的dev分支：<code>git checkout -b dev origin/dev</code></p>
<blockquote>
<h3 id="加Tag">加Tag</h3></blockquote>
<h4 id="git_tag_tagname_develop"><code>git tag tagname develop</code></h4><p>git tag中的两个参数，一个是标签名称，另一个是希望打标签的点develop分支的末梢。</p>
<blockquote>
<h3 id="合并分支">合并分支</h3></blockquote>
<h4 id="git_checkout_master"><code>git checkout master</code></h4><p>先转到主分支</p>
<h4 id="git_merge_-no-ff_develop"><code>git merge --no-ff develop</code></h4><p>然后把develop分支merge过来</p>
<p>参数意义：<br>不用参数的默认情况下，是执行快进式合并。<br>使用参数–no-ff，会执行正常合并，在master分支上生成一个新节点。<br>merge的时候如果遇到冲突，就手动解决，然后重新add，commit即可。  </p>
<blockquote>
<p>相关链接：<br>文章转自圣骑士Wind的博客，地址<a href="http://www.cnblogs.com/mengdd/p/3447464.html" target="_blank" rel="external">http://www.cnblogs.com/mengdd/p/3447464.html</a><br>github帮助：<a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="external">https://help.github.com/articles/set-up-git/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="git_问题回忆录">git 问题回忆录</h5><p>最近使用git一直遇到问题，前段时间还把自己的工程项目全部删除了，真的是苦恼，这次决心要把git吃个遍，可是刚学会了如何新建Branch，却发现自己缺了点东西，不知道怎么把分支同步到master，真的是郁闷，总不能一直让我在github官网上删除同步吧。<br>可是多谢万能的<strong>Google</strong> #此处略去三千字#，让我迅速找到了相关命令，没错，就是它<br><code>git checkout master</code> 先切换到主分支。<br><code>git merge &#39;branch name&#39;</code>  将分支合并到主分支。<br>可是依然有问题，<code>error: Your local changes to the following files would be overwritten by checkout</code>,就是在题目中给出的问题。<br>感谢万能的<code>stackoverflow</code>，不仅帮我解决了iOS上的问题，更是帮我解决了git的大问题。鉴于<code>stackoverflow</code>国内被墙，我还是截张图片来吧，]]>
    
    </summary>
    
      <category term="git" scheme="http://qiuncheng.com/tags/git/"/>
    
      <category term="git" scheme="http://qiuncheng.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[instance member 'gameView'cannot be used on type '...']]></title>
    <link href="http://qiuncheng.com/2015/11/21/22-ios-instance../"/>
    <id>http://qiuncheng.com/2015/11/21/22-ios-instance../</id>
    <published>2015-11-21T11:05:11.000Z</published>
    <updated>2015-11-21T11:48:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>貌似昨天也遇到这样的问题，但是却没有在意，只是在<code>stackoverflow</code>上一下子找到了解决方案也没有在意，不过今天又遇到了这样的问题，确实让我很恼火，如下图所示，我要干什么就不在这里向大家说了。但是这里确实有错误，所以说这应该是一种规范吧，得找到相关东西，尽量避免以后出现这种错误，因此把它写出来应该影响会更深刻些。   </p>
</blockquote>
<p><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151121-0.png" alt="错误提示"><br>在<code>stackoverflow</code>上可以看到问题出在这里Xcode不知道gameView是谁！在这里我们在gameView前面添加了一个<code>self.</code>结果又出现了这个问题。如下图：<br><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151121-1.png" alt="self.gameView错误"><br><a id="more"></a><br>看到这里我想你肯定诧异了，明明添加了<code>self</code>并且制定了<code>gameView</code>是本对象下的view，可是为什么还是不可以呢？这里又有一个问题了。根据<code>stackoverflow</code>上的提示，此时self并没有初始化，所以系统也不知道self属性是啥!!哈哈哈哈哈~~~~<br>这下应该懂了吧，所以要对该属性添加lazy限制。来看下《<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html" target="_blank" rel="external">The Swift Programming Language: Properties</a>》对lazy stored property的定义吧。<br><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151121-2.png" alt="lazy stored property"><br>这里指明了在需要用的时候才会调用它，所以不用担心self初始化的问题了。hiahia，完美解决。。。<br>下面附上<code>stackoverflow</code>上问题链接<a href="http://stackoverflow.com/questions/32544935/instance-member-view-cannot-be-used-on-type-gamescene" target="_blank" rel="external">http://stackoverflow.com/questions/32544935/instance-member-view-cannot-be-used-on-type-gamescene</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>貌似昨天也遇到这样的问题，但是却没有在意，只是在<code>stackoverflow</code>上一下子找到了解决方案也没有在意，不过今天又遇到了这样的问题，确实让我很恼火，如下图所示，我要干什么就不在这里向大家说了。但是这里确实有错误，所以说这应该是一种规范吧，得找到相关东西，尽量避免以后出现这种错误，因此把它写出来应该影响会更深刻些。   </p>
</blockquote>
<p><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151121-0.png" alt="错误提示"><br>在<code>stackoverflow</code>上可以看到问题出在这里Xcode不知道gameView是谁！在这里我们在gameView前面添加了一个<code>self.</code>结果又出现了这个问题。如下图：<br><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151121-1.png" alt="self.gameView错误"><br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sendAsynchronousRequest竟然被弃用了！！！]]></title>
    <link href="http://qiuncheng.com/2015/11/19/21-iOS-sendAsynchronousRequest-deprecated/"/>
    <id>http://qiuncheng.com/2015/11/19/21-iOS-sendAsynchronousRequest-deprecated/</id>
    <published>2015-11-19T12:53:34.000Z</published>
    <updated>2015-11-20T11:44:58.000Z</updated>
    <content type="html"><![CDATA[<h6 id="我去，iOS9改动太大，NSURLConnection竟然被NSURLSession替代了。">我去，iOS9改动太大，<code>NSURLConnection</code>竟然被<code>NSURLSession</code>替代了。</h6><p>然而我看了半天<code>NSURLConnection</code>，刚学会怎么用，竟然告诉我不能用了。简直不能忍了。呜呜呜呜呜<del>~</del>  </p>
<hr>
<p>这是不是也提醒了我一件事，那就是Swift才是王道，看来apple也正在抛弃原来Objective-C的那些臃肿繁琐的东西呀，哈哈哈哈，好事情，不过我还得再去看看<code>NSURLSession</code>了，呜呜呜呜~~~~伐开心！！</p>
<p>不管了，先来用下NSURLConnection实现一个小Demo再说吧，虽然舍弃了，但还是可以用的吗，仅仅是Wornning而已呀！</p>
<hr>
<a id="more"></a>
<p><del>【Demo待更新！！！！】</del><br>好了现在回来更新Demo：  </p>
<p>其实Demo就是很简单的—利用k780.com—上的API来实现在imageView上显示一张图片的功能,哈哈哈哈哈~~~原谅我只会这么简单的。其实我觉得用些简单的已经足够了。具体见下图：<br><img src="http://7xk67j.com1.z0.glb.clouddn.com/QQ20151120-2.png" alt="所有代码"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h6 id="我去，iOS9改动太大，NSURLConnection竟然被NSURLSession替代了。">我去，iOS9改动太大，<code>NSURLConnection</code>竟然被<code>NSURLSession</code>替代了。</h6><p>然而我看了半天<code>NSURLConnection</code>，刚学会怎么用，竟然告诉我不能用了。简直不能忍了。呜呜呜呜呜<del>~</del>  </p>
<hr>
<p>这是不是也提醒了我一件事，那就是Swift才是王道，看来apple也正在抛弃原来Objective-C的那些臃肿繁琐的东西呀，哈哈哈哈，好事情，不过我还得再去看看<code>NSURLSession</code>了，呜呜呜呜~~~~伐开心！！</p>
<p>不管了，先来用下NSURLConnection实现一个小Demo再说吧，虽然舍弃了，但还是可以用的吗，仅仅是Wornning而已呀！</p>
<hr>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每一个iOS初学者都应该看看斯坦福大学白胡子《Developing iOS 8 Apps with Swift》视频]]></title>
    <link href="http://qiuncheng.com/2015/11/11/20-iOS-Stanford-iOS8/"/>
    <id>http://qiuncheng.com/2015/11/11/20-iOS-Stanford-iOS8/</id>
    <published>2015-11-11T02:45:11.000Z</published>
    <updated>2015-11-11T04:09:59.000Z</updated>
    <content type="html"><![CDATA[<h5 id="前言">前言</h5><p>不得不承认，在Swift出现以前对于没有天赋的人自学iOS开发确实有一定的难度，但是自从Apple推出了全新的编程语言Swift，我觉得人人都是程序员的口号越来越近了。<br>我是今年9月底无意中接触了Swift，当时我还在一股脑子得学Python，想着将来靠Python发大财，可是突然有天iPad的iBooks里多了本《The Swift Programming Language》，于是在一个月高风黑的晚上我独自一人看起了Swift，第一个晚上一下子把《Language Guide》看了个大半，从此就一发不可收拾，可能是我之前写过Python的原因，她两的语法现在时太像了。简洁优雅形容不过。<br>于是我就索性搞起了iOS。。。</p>
<h5 id="正文">正文</h5><p>我先是看的是<code>麦子学院</code>的Sundy老师的Swift入门视频，外加《The Swift Programming Language》和《Using Swift With Cocoa and Objective-C》这两本书，后来随着学习的深入，略微发现自己学的简直是太浅，不能马上运用起来，比如我想做一款“Classmates”的应用，想象着很美，甚至连原型图都画好了，结果做起来各种问题都跑出来了，说到底还是我了解的太少了，做一款应用需要的太多了，而且我的了解都是快速的碎片化的记忆，所以我就跑去网上找各种学习资源，果然黄天不负有心人，我终于找到了这个Stanford University的白胡子老师的视频，现在看到了第十集的UITableView,讲的真是好，虽然有些没有听懂，但还是很满足，至少让我对编程有了一个重新的认识，这样说吧，我举个很简单的例子，他的很多代码都值得我们去仔细好好研究下，每一个实例Demo里都充分运用Struct、Enum、Setter、Getter等等，这些小技巧能让你在今后代码重构，代码测试中省去好多事情。<br>我是那种不能光看视频的人，于是我在看视频的事后基本上把他写的东西又重新敲了一遍，有时候理解不等于会写，看什么都能够理解，但是当你去写的时候你发现自己不知怎么下手，所以看视频最好的边看边写，这样在理解的基础上能够加深认识。下面我想简单滴介绍下我之前跟着白胡子老师做的几个小Demo：<a id="more"></a>  </p>
<h6 id="Demo_#未完待续">Demo #未完待续</h6><ul>
<li>Calculator：这个可以说是我见过比较复杂的计算器之一，我说他复杂并不是他的功能，当然它的功能很简单的，只有四则运算和一个求平方根的运算。我说是它的逻辑，在这个Demo里充分运用到了闭包，以及MVC思想，我并不知道怎么来形容这个，但是在我看来这个Demo比国内好多其他老师的Demo好多了，主要是思想。<br>  <em>下面是该Demo的工程地址：<a href="https://github.com/qiuncheng/Calculator" target="_blank" rel="external">https://github.com/qiuncheng/Calculator</a></em></li>
<li>Psychologist: 这个嘛我学到最多的就是进一步加深了MVC以及手势识别，didSet和willSet的用法，这个在我之前真的是没有遇到过，貌似我还特地查了下didSetwillSet的用法，结果关东升老师的博客一下子点透了我，我特别喜欢这个项目的是那个笑脸，我最近还想着要给这个笑脸添加一些功能呢，比如改变颜色，自由搭配等等。<br>  <em>下面是该Demo的工程地址：<a href="https://github.com/qiuncheng/Psychologist" target="_blank" rel="external">https://github.com/qiuncheng/Psychologist</a></em></li>
<li>AutoLayout: 这个并不想多说，我觉得想要了解AutoLayout的必看，然后再结合这个Demo反复了解下绝对没有问题的。可能以后开发中会遇到些小问题，那就到时候再依次解决吧。<br>  <em>下面是该Demo的工程地址：<a href="https://github.com/qiuncheng/Autolayout" target="_blank" rel="external">https://github.com/qiuncheng/Autolayout</a></em></li>
<li>Cassini: 这个是我这几天看视频跟着做的Demo里面最后一个了。这个主要运用了ScrollView，但是也是有一些小问题的，在使用http的时候，这个可以结合我上篇博文看下，我觉得这个Demo里最主要是对多线程有了一个小小的认识，也算是了解吧。以后还得多加深对多线程的练习。<br>  <em>下面是该Demo的工程地址：<a href="https://github.com/qiuncheng/Casini" target="_blank" rel="external">https://github.com/qiuncheng/Casini</a></em><h6 id="结尾">结尾</h6>说了这么多，我总觉得少了些什么！原来是少了视频资源的地址，当时我是从学校资源网下载的。不过我这里还有百度云盘的下载地址：<a href="http://pan.baidu.com/s/1sjkU08X" target="_blank" rel="external">Developing iOS 8 Apps with Swift</a>,中文字幕转到<a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="external">Github有一个翻译项目</a>  <blockquote>
<p>或许你一定还想要源码，白胡子老师码字速度太快，😂😂。别急，在这里。<a href="https://github.com/m2mtech" target="_blank" rel="external">源码地址</a></p>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="前言">前言</h5><p>不得不承认，在Swift出现以前对于没有天赋的人自学iOS开发确实有一定的难度，但是自从Apple推出了全新的编程语言Swift，我觉得人人都是程序员的口号越来越近了。<br>我是今年9月底无意中接触了Swift，当时我还在一股脑子得学Python，想着将来靠Python发大财，可是突然有天iPad的iBooks里多了本《The Swift Programming Language》，于是在一个月高风黑的晚上我独自一人看起了Swift，第一个晚上一下子把《Language Guide》看了个大半，从此就一发不可收拾，可能是我之前写过Python的原因，她两的语法现在时太像了。简洁优雅形容不过。<br>于是我就索性搞起了iOS。。。</p>
<h5 id="正文">正文</h5><p>我先是看的是<code>麦子学院</code>的Sundy老师的Swift入门视频，外加《The Swift Programming Language》和《Using Swift With Cocoa and Objective-C》这两本书，后来随着学习的深入，略微发现自己学的简直是太浅，不能马上运用起来，比如我想做一款“Classmates”的应用，想象着很美，甚至连原型图都画好了，结果做起来各种问题都跑出来了，说到底还是我了解的太少了，做一款应用需要的太多了，而且我的了解都是快速的碎片化的记忆，所以我就跑去网上找各种学习资源，果然黄天不负有心人，我终于找到了这个Stanford University的白胡子老师的视频，现在看到了第十集的UITableView,讲的真是好，虽然有些没有听懂，但还是很满足，至少让我对编程有了一个重新的认识，这样说吧，我举个很简单的例子，他的很多代码都值得我们去仔细好好研究下，每一个实例Demo里都充分运用Struct、Enum、Setter、Getter等等，这些小技巧能让你在今后代码重构，代码测试中省去好多事情。<br>我是那种不能光看视频的人，于是我在看视频的事后基本上把他写的东西又重新敲了一遍，有时候理解不等于会写，看什么都能够理解，但是当你去写的时候你发现自己不知怎么下手，所以看视频最好的边看边写，这样在理解的基础上能够加深认识。下面我想简单滴介绍下我之前跟着白胡子老师做的几个小Demo：]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在iOS上优雅滴使用http://]]></title>
    <link href="http://qiuncheng.com/2015/11/11/19-iOS-http/"/>
    <id>http://qiuncheng.com/2015/11/11/19-iOS-http/</id>
    <published>2015-11-11T02:21:12.000Z</published>
    <updated>2015-11-11T02:39:52.000Z</updated>
    <content type="html"><![CDATA[<p>话说当我使用<code>http://</code>请求网络上一张图片时我发现我使用的Xcode7.1竟然不响应，然后还爆出了错误，这个让我很生气，后来查看错误提示得知貌似<code>http</code>不安全。<br>错误代码提示如下：<br><code>Transport security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&#39;s Info.plist file.</code><br>百度了一段时间无果后果断挂上<code>VPN</code>翻了一下，在<a href="http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http" target="_blank" rel="external">StackOverflow</a>上找到了解决方案，原来就是在<code>info.plist</code>里enable<code>http</code>mode就可以了。奥，我的天！原谅我开接触这个。<br>可是如何添加呢？请看下图：<a id="more"></a><br><img src="http://7xk67j.com1.z0.glb.clouddn.com/iOSQQ20151111-0.png" alt="图中最上面蓝色框里面的添加到info.plist里">   </p>
<blockquote>
<p>OK，It helps， hope useful to you!</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>话说当我使用<code>http://</code>请求网络上一张图片时我发现我使用的Xcode7.1竟然不响应，然后还爆出了错误，这个让我很生气，后来查看错误提示得知貌似<code>http</code>不安全。<br>错误代码提示如下：<br><code>Transport security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&#39;s Info.plist file.</code><br>百度了一段时间无果后果断挂上<code>VPN</code>翻了一下，在<a href="http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http">StackOverflow</a>上找到了解决方案，原来就是在<code>info.plist</code>里enable<code>http</code>mode就可以了。奥，我的天！原谅我开接触这个。<br>可是如何添加呢？请看下图：]]>
    
    </summary>
    
      <category term="iOS" scheme="http://qiuncheng.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://qiuncheng.com/categories/iOS/"/>
    
  </entry>
  
</feed>
